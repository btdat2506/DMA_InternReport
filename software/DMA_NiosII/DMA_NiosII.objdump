
DMA_NiosII.elf:     file format elf32-littlenios2
DMA_NiosII.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002130 memsz 0x00002130 flags r-x
    LOAD off    0x00004000 vaddr 0x00020000 paddr 0x00002150 align 2**12
         filesz 0x00000668 memsz 0x0000070c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00004668  2**0
                  CONTENTS
  2 .text         00002130  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003a0  00020000  00002150  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002c8  000203a0  000024f0  000043a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000000a4  00020668  000027b8  00004668  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000027b8  000027b8  00004668  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  0002070c  0002070c  00004668  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00004668  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000530  00000000  00000000  00004698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0000717a  00000000  00000000  00004bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a4a  00000000  00000000  0000bd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   000021f9  00000000  00000000  0000e78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00000a90  00000000  00000000  00010988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00000fe6  00000000  00000000  00011418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00012400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000020  00000000  00000000  00012410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000dae  00000000  00000000  00012430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00001183  00000000  00000000  000131de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000001b7  00000000  00000000  00014361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00020000 l    d  .rodata	00000000 .rodata
000203a0 l    d  .rwdata	00000000 .rwdata
00020668 l    d  .bss	00000000 .bss
000027b8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0002070c l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
0000005c l     F .text	00000044 dma_write_reg
000000a0 l     F .text	00000038 dma_read_reg
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000654 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_load.c
00000ef0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00001058 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001198 l     F .text	00000034 alt_dev_reg
00020474 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00001480 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000015b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000015e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000017b0 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00001900 l     F .text	0000003c alt_get_errno
0000193c l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000fdc g     F .text	0000007c alt_main
000005a8 g     F .text	00000080 _puts_r
000024f0 g       *ABS*	00000000 __flash_rwdata_start
00000560 g     F .text	00000048 printf
000203a0 g     O .rwdata	00000080 pdata0
00001be8 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00020678 g     O .bss	00000004 __stdio_exit_handler
00000020 g       *ABS*	00000000 __flash_exceptions_start
00020668 g     O .bss	00000004 errno
00020670 g     O .bss	00000004 alt_argv
00028648 g       *ABS*	00000000 _gp
000204c8 g     O .rwdata	00000180 alt_fd_list
00001c0c g     F .text	00000090 alt_find_dev
00000368 g     F .text	000000d4 verify_dma_transfer
00001884 g     F .text	0000007c alt_io_redirect
00002150 g       *ABS*	00000000 __DTOR_END__
00000628 g     F .text	00000010 puts
000012fc g     F .text	000000ec altera_avalon_jtag_uart_read
00000524 g     F .text	0000003c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000de0 g     F .text	00000064 .hidden __udivsi3
00000ec8 g     F .text	00000028 alt_dcache_flush
00020660 g     O .rwdata	00000004 alt_max_fd
00000204 g     F .text	000000cc start_dma_transfer
0002070c g       *ABS*	00000000 __bss_end
000204a0 g     O .rwdata	00000028 alt_dev_null
00001598 g     F .text	00000020 alt_dcache_flush_all
00020668 g       *ABS*	00000000 __ram_rwdata_end
00020658 g     O .rwdata	00000008 alt_dev_list
00001094 g     F .text	00000104 write
000203a0 g       *ABS*	00000000 __ram_rodata_end
00000e44 g     F .text	0000005c .hidden __umodsi3
0002070c g       *ABS*	00000000 end
00002150 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
000013e8 g     F .text	00000098 altera_avalon_jtag_uart_write
000006c0 g     F .text	0000051c ___vfprintf_internal_r
00001fe8 g     F .text	0000012c __call_exitprocs
00020680 g     O .bss	0000008c __atexit0
00000020 g     F .text	0000003c _start
00001208 g     F .text	00000034 alt_sys_init
00001ec0 g     F .text	00000128 __register_exitproc
00000ea0 g     F .text	00000028 .hidden __mulsi3
000203a0 g       *ABS*	00000000 __ram_rwdata_start
00020000 g       *ABS*	00000000 __ram_rodata_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
0000123c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001da4 g     F .text	000000b8 alt_get_fd
00001e90 g     F .text	00000030 memcmp
0002070c g       *ABS*	00000000 __alt_stack_base
0002067c g     O .bss	00000004 __atexit
00001c9c g     F .text	00000108 alt_find_file
00001620 g     F .text	000000a8 alt_dev_llist_insert
00000bf4 g     F .text	000000a8 __sfvwrite_small_dev
00020668 g       *ABS*	00000000 __bss_start
0000043c g     F .text	000000e8 main
00020674 g     O .bss	00000004 alt_envp
0000129c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00020648 g     O .rwdata	00000004 pdata1
00020664 g     O .rwdata	00000004 alt_errno
00000cec g     F .text	00000080 .hidden __divsi3
00002150 g       *ABS*	00000000 __CTOR_END__
00002150 g       *ABS*	00000000 __flash_rodata_start
00002150 g       *ABS*	00000000 __DTOR_LIST__
000011cc g     F .text	0000003c alt_irq_init
00001b78 g     F .text	00000070 alt_release_fd
00001e5c g     F .text	00000014 atexit
00000c9c g     F .text	00000050 _write_r
0002064c g     O .rwdata	00000004 _impure_ptr
0002066c g     O .bss	00000004 alt_argc
0000172c g     F .text	00000064 _do_dtors
00020650 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00020668 g       *ABS*	00000000 _edata
0002070c g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000002d0 g     F .text	00000098 wait_for_dma_done
00001e70 g     F .text	00000020 exit
00000d6c g     F .text	00000074 .hidden __modsi3
00020420 g     O .rwdata	00000054 _impure_data
00040000 g       *ABS*	00000000 __alt_data_end
00002114 g     F .text	0000003c _exit
00000638 g     F .text	0000001c strlen
00001a18 g     F .text	00000160 open
00001790 g     F .text	00000020 alt_icache_flush_all
000000d8 g     F .text	0000012c reset_dma
00000bdc g     F .text	00000018 __vfprintf_internal
000016c8 g     F .text	00000064 _do_ctors
000014bc g     F .text	000000dc close
00000f58 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
      28:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
      2c:	d6a19214 	ori	gp,gp,34376
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
      34:	10819a14 	ori	r2,r2,1640

    movhi r3, %hi(__bss_end)
      38:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
      3c:	18c1c314 	ori	r3,r3,1804

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	0000f580 	call	f58 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	0000fdc0 	call	fdc <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <dma_write_reg>:
// Adding an offset within the memory for clarity/safety
alt_u32 *pdata1 = (alt_u32 *)(ONCHIP_MEMORY2_1_BASE + 0x100); // Offset 0x100 within mem 1

// Write to DMA register (using word offset for IOWR)
static inline void dma_write_reg(alt_u32 reg_offset, alt_u32 value)
{
      5c:	defffd04 	addi	sp,sp,-12
      60:	df000215 	stw	fp,8(sp)
      64:	df000204 	addi	fp,sp,8
      68:	e13fff15 	stw	r4,-4(fp)
      6c:	e17ffe15 	stw	r5,-8(fp)
    IOWR(DMA_CONTROLLER_BASE, reg_offset, value);
      70:	e0bfff17 	ldw	r2,-4(fp)
      74:	100690ba 	slli	r3,r2,2
      78:	00800134 	movhi	r2,4
      7c:	10840004 	addi	r2,r2,4096
      80:	1885883a 	add	r2,r3,r2
      84:	e0fffe17 	ldw	r3,-8(fp)
      88:	10c00035 	stwio	r3,0(r2)
}
      8c:	0001883a 	nop
      90:	e037883a 	mov	sp,fp
      94:	df000017 	ldw	fp,0(sp)
      98:	dec00104 	addi	sp,sp,4
      9c:	f800283a 	ret

000000a0 <dma_read_reg>:

// Read from DMA register (using word offset for IORD)
static inline alt_u32 dma_read_reg(alt_u32 reg_offset)
{
      a0:	defffe04 	addi	sp,sp,-8
      a4:	df000115 	stw	fp,4(sp)
      a8:	df000104 	addi	fp,sp,4
      ac:	e13fff15 	stw	r4,-4(fp)
    return IORD(DMA_CONTROLLER_BASE, reg_offset);
      b0:	e0bfff17 	ldw	r2,-4(fp)
      b4:	100690ba 	slli	r3,r2,2
      b8:	00800134 	movhi	r2,4
      bc:	10840004 	addi	r2,r2,4096
      c0:	1885883a 	add	r2,r3,r2
      c4:	10800037 	ldwio	r2,0(r2)
}
      c8:	e037883a 	mov	sp,fp
      cc:	df000017 	ldw	fp,0(sp)
      d0:	dec00104 	addi	sp,sp,4
      d4:	f800283a 	ret

000000d8 <reset_dma>:

// --- NEW FUNCTION: Reset DMA Controller ---
// Attempts to reset the DMA state via software writes
bool reset_dma()
{
      d8:	defffd04 	addi	sp,sp,-12
      dc:	dfc00215 	stw	ra,8(sp)
      e0:	df000115 	stw	fp,4(sp)
      e4:	df000104 	addi	fp,sp,4
    printf("Resetting DMA Controller...\n");
      e8:	010000b4 	movhi	r4,2
      ec:	21000004 	addi	r4,r4,0
      f0:	00006280 	call	628 <puts>

    // 1. Clear the GO bit in the Control Register to stop new transfers
    printf("  Clearing GO bit (Reg %d)...\n", DMA_REG_CONTROL);
      f4:	01400104 	movi	r5,4
      f8:	010000b4 	movhi	r4,2
      fc:	21000704 	addi	r4,r4,28
     100:	00005600 	call	560 <printf>
    dma_write_reg(DMA_REG_CONTROL, 0);
     104:	000b883a 	mov	r5,zero
     108:	01000104 	movi	r4,4
     10c:	000005c0 	call	5c <dma_write_reg>

    // 2. Clear configuration registers
    printf("  Clearing Address/Length Regs (%d, %d, %d)...\n",
     110:	01c00084 	movi	r7,2
     114:	01800044 	movi	r6,1
     118:	000b883a 	mov	r5,zero
     11c:	010000b4 	movhi	r4,2
     120:	21000f04 	addi	r4,r4,60
     124:	00005600 	call	560 <printf>
           DMA_REG_READADDRESS, DMA_REG_WRITEADDRESS, DMA_REG_LENGTH);
    dma_write_reg(DMA_REG_READADDRESS, 0);
     128:	000b883a 	mov	r5,zero
     12c:	0009883a 	mov	r4,zero
     130:	000005c0 	call	5c <dma_write_reg>
    dma_write_reg(DMA_REG_WRITEADDRESS, 0);
     134:	000b883a 	mov	r5,zero
     138:	01000044 	movi	r4,1
     13c:	000005c0 	call	5c <dma_write_reg>
    dma_write_reg(DMA_REG_LENGTH, 0);
     140:	000b883a 	mov	r5,zero
     144:	01000084 	movi	r4,2
     148:	000005c0 	call	5c <dma_write_reg>

    // 3. Clear the DONE status bit (Write-1-to-clear)
    // Check if DONE is already set before clearing
    if (dma_read_reg(DMA_REG_STATUS) & DMA_STATUS_DONE)
     14c:	01000144 	movi	r4,5
     150:	00000a00 	call	a0 <dma_read_reg>
     154:	1080004c 	andi	r2,r2,1
     158:	10000726 	beq	r2,zero,178 <reset_dma+0xa0>
    {
        printf("  Clearing DONE status bit (Reg %d)...\n", DMA_REG_STATUS);
     15c:	01400144 	movi	r5,5
     160:	010000b4 	movhi	r4,2
     164:	21001b04 	addi	r4,r4,108
     168:	00005600 	call	560 <printf>
        dma_write_reg(DMA_REG_STATUS, DMA_STATUS_DONE); // Write 1 to DONE bit
     16c:	01400044 	movi	r5,1
     170:	01000144 	movi	r4,5
     174:	000005c0 	call	5c <dma_write_reg>
    }

    // 4. Wait for the BUSY flag to clear (optional but recommended)
    printf("  Waiting for BUSY bit to clear (Reg %d)...\n", DMA_REG_STATUS);
     178:	01400144 	movi	r5,5
     17c:	010000b4 	movhi	r4,2
     180:	21002504 	addi	r4,r4,148
     184:	00005600 	call	560 <printf>
    int timeout = DMA_RESET_TIMEOUT;
     188:	0089c404 	movi	r2,10000
     18c:	e0bfff15 	stw	r2,-4(fp)
    while ((dma_read_reg(DMA_REG_STATUS) & DMA_STATUS_BUSY) && (timeout > 0))
     190:	00000306 	br	1a0 <reset_dma+0xc8>
    {
        timeout--;
     194:	e0bfff17 	ldw	r2,-4(fp)
     198:	10bfffc4 	addi	r2,r2,-1
     19c:	e0bfff15 	stw	r2,-4(fp)
    while ((dma_read_reg(DMA_REG_STATUS) & DMA_STATUS_BUSY) && (timeout > 0))
     1a0:	01000144 	movi	r4,5
     1a4:	00000a00 	call	a0 <dma_read_reg>
     1a8:	1080008c 	andi	r2,r2,2
     1ac:	10000226 	beq	r2,zero,1b8 <reset_dma+0xe0>
     1b0:	e0bfff17 	ldw	r2,-4(fp)
     1b4:	00bff716 	blt	zero,r2,194 <reset_dma+0xbc>
        // Optional delay
        // for(volatile int d=0; d<10; d++);
    }

    if (timeout == 0)
     1b8:	e0bfff17 	ldw	r2,-4(fp)
     1bc:	1000051e 	bne	r2,zero,1d4 <reset_dma+0xfc>
    {
        printf("  Error: DMA reset timeout - BUSY bit did not clear!\n");
     1c0:	010000b4 	movhi	r4,2
     1c4:	21003104 	addi	r4,r4,196
     1c8:	00006280 	call	628 <puts>
        return false;
     1cc:	0005883a 	mov	r2,zero
     1d0:	00000706 	br	1f0 <reset_dma+0x118>
    }

    printf("DMA Reset complete. Final Status: 0x%lx\n", dma_read_reg(DMA_REG_STATUS));
     1d4:	01000144 	movi	r4,5
     1d8:	00000a00 	call	a0 <dma_read_reg>
     1dc:	100b883a 	mov	r5,r2
     1e0:	010000b4 	movhi	r4,2
     1e4:	21003f04 	addi	r4,r4,252
     1e8:	00005600 	call	560 <printf>
    return true;
     1ec:	00800044 	movi	r2,1
}
     1f0:	e037883a 	mov	sp,fp
     1f4:	dfc00117 	ldw	ra,4(sp)
     1f8:	df000017 	ldw	fp,0(sp)
     1fc:	dec00204 	addi	sp,sp,8
     200:	f800283a 	ret

00000204 <start_dma_transfer>:
// --- End of reset_dma function ---

// Start DMA transfer
void start_dma_transfer(alt_u32 src_addr, alt_u32 dst_addr, alt_u32 length_bytes)
{
     204:	defffb04 	addi	sp,sp,-20
     208:	dfc00415 	stw	ra,16(sp)
     20c:	df000315 	stw	fp,12(sp)
     210:	df000304 	addi	fp,sp,12
     214:	e13fff15 	stw	r4,-4(fp)
     218:	e17ffe15 	stw	r5,-8(fp)
     21c:	e1bffd15 	stw	r6,-12(fp)
    printf("Configuring DMA Regs:\n");
     220:	010000b4 	movhi	r4,2
     224:	21004a04 	addi	r4,r4,296
     228:	00006280 	call	628 <puts>
    printf("  Reg %d (Read Addr) : 0x%08lx\n", DMA_REG_READADDRESS, src_addr);
     22c:	e1bfff17 	ldw	r6,-4(fp)
     230:	000b883a 	mov	r5,zero
     234:	010000b4 	movhi	r4,2
     238:	21005004 	addi	r4,r4,320
     23c:	00005600 	call	560 <printf>
    printf("  Reg %d (Write Addr): 0x%08lx\n", DMA_REG_WRITEADDRESS, dst_addr);
     240:	e1bffe17 	ldw	r6,-8(fp)
     244:	01400044 	movi	r5,1
     248:	010000b4 	movhi	r4,2
     24c:	21005804 	addi	r4,r4,352
     250:	00005600 	call	560 <printf>
    printf("  Reg %d (Length)    : %lu bytes\n", DMA_REG_LENGTH, length_bytes);
     254:	e1bffd17 	ldw	r6,-12(fp)
     258:	01400084 	movi	r5,2
     25c:	010000b4 	movhi	r4,2
     260:	21006004 	addi	r4,r4,384
     264:	00005600 	call	560 <printf>
    printf("  Reg %d (Control)   : 0x%08X\n", DMA_REG_CONTROL, (alt_u32)DMA_CONTROL_GO);
     268:	01800044 	movi	r6,1
     26c:	01400104 	movi	r5,4
     270:	010000b4 	movhi	r4,2
     274:	21006904 	addi	r4,r4,420
     278:	00005600 	call	560 <printf>

    // Write the source and destination addresses
    dma_write_reg(DMA_REG_READADDRESS, src_addr);
     27c:	e17fff17 	ldw	r5,-4(fp)
     280:	0009883a 	mov	r4,zero
     284:	000005c0 	call	5c <dma_write_reg>
    dma_write_reg(DMA_REG_WRITEADDRESS, dst_addr);
     288:	e17ffe17 	ldw	r5,-8(fp)
     28c:	01000044 	movi	r4,1
     290:	000005c0 	call	5c <dma_write_reg>

    // Write the length (number of bytes to transfer)
    dma_write_reg(DMA_REG_LENGTH, length_bytes);
     294:	e17ffd17 	ldw	r5,-12(fp)
     298:	01000084 	movi	r4,2
     29c:	000005c0 	call	5c <dma_write_reg>
    // Check your CONTROL_SLAVE Verilog for address 5 write behavior
    // Assuming bit 0 of status reg is DONE, and writing 1 clears it:
    // dma_write_reg(DMA_REG_STATUS, DMA_STATUS_DONE); // This might be better placed in reset or just before GO

    // Set the GO bit to start DMA
    dma_write_reg(DMA_REG_CONTROL, DMA_CONTROL_GO);
     2a0:	01400044 	movi	r5,1
     2a4:	01000104 	movi	r4,4
     2a8:	000005c0 	call	5c <dma_write_reg>
    printf("DMA GO bit set.\n");
     2ac:	010000b4 	movhi	r4,2
     2b0:	21007104 	addi	r4,r4,452
     2b4:	00006280 	call	628 <puts>
}
     2b8:	0001883a 	nop
     2bc:	e037883a 	mov	sp,fp
     2c0:	dfc00117 	ldw	ra,4(sp)
     2c4:	df000017 	ldw	fp,0(sp)
     2c8:	dec00204 	addi	sp,sp,8
     2cc:	f800283a 	ret

000002d0 <wait_for_dma_done>:

// Wait for DMA to complete
bool wait_for_dma_done()
{
     2d0:	defffc04 	addi	sp,sp,-16
     2d4:	dfc00315 	stw	ra,12(sp)
     2d8:	df000215 	stw	fp,8(sp)
     2dc:	df000204 	addi	fp,sp,8
    alt_u32 status;
    printf("Polling DMA Status (Reg %d)...\n", DMA_REG_STATUS);
     2e0:	01400144 	movi	r5,5
     2e4:	010000b4 	movhi	r4,2
     2e8:	21007504 	addi	r4,r4,468
     2ec:	00005600 	call	560 <printf>
    // Add a timeout to prevent infinite loops
    int timeout = 1000000; // Adjust as needed
     2f0:	008003f4 	movhi	r2,15
     2f4:	10909004 	addi	r2,r2,16960
     2f8:	e0bffe15 	stw	r2,-8(fp)
    while (timeout > 0)
     2fc:	00000e06 	br	338 <wait_for_dma_done+0x68>
    {
        status = dma_read_reg(DMA_REG_STATUS);
     300:	01000144 	movi	r4,5
     304:	00000a00 	call	a0 <dma_read_reg>
     308:	e0bfff15 	stw	r2,-4(fp)
        // printf("Status: 0x%08lx\n", status); // Debug print
        if (status & DMA_STATUS_DONE)
     30c:	e0bfff17 	ldw	r2,-4(fp)
     310:	1080004c 	andi	r2,r2,1
     314:	10000526 	beq	r2,zero,32c <wait_for_dma_done+0x5c>
        {
            printf("DMA DONE bit detected.\n");
     318:	010000b4 	movhi	r4,2
     31c:	21007d04 	addi	r4,r4,500
     320:	00006280 	call	628 <puts>
            // Optional: Clear the DONE bit after detecting it by writing 1 to it
            // dma_write_reg(DMA_REG_STATUS, DMA_STATUS_DONE);
            return true;
     324:	00800044 	movi	r2,1
     328:	00000a06 	br	354 <wait_for_dma_done+0x84>
        //           // DONE was set just after BUSY dropped
        //           printf("DMA DONE bit detected (just after BUSY cleared).\n");
        //           return true;
        //      }
        // }
        timeout--;
     32c:	e0bffe17 	ldw	r2,-8(fp)
     330:	10bfffc4 	addi	r2,r2,-1
     334:	e0bffe15 	stw	r2,-8(fp)
    while (timeout > 0)
     338:	e0bffe17 	ldw	r2,-8(fp)
     33c:	00bff016 	blt	zero,r2,300 <wait_for_dma_done+0x30>
        // Add a small delay or yield if in an RTOS environment
        // for(volatile int d=0; d<100; d++); // Simple delay
    }
    printf("Error: Timeout waiting for DMA DONE bit. Final Status: 0x%lx\n", status);
     340:	e17fff17 	ldw	r5,-4(fp)
     344:	010000b4 	movhi	r4,2
     348:	21008304 	addi	r4,r4,524
     34c:	00005600 	call	560 <printf>
    return false;
     350:	0005883a 	mov	r2,zero
}
     354:	e037883a 	mov	sp,fp
     358:	dfc00117 	ldw	ra,4(sp)
     35c:	df000017 	ldw	fp,0(sp)
     360:	dec00204 	addi	sp,sp,8
     364:	f800283a 	ret

00000368 <verify_dma_transfer>:

// Verify DMA transfer
bool verify_dma_transfer(alt_u32 *src, alt_u32 *dst, alt_u32 num_words)
{
     368:	defff804 	addi	sp,sp,-32
     36c:	dfc00715 	stw	ra,28(sp)
     370:	df000615 	stw	fp,24(sp)
     374:	df000604 	addi	fp,sp,24
     378:	e13ffc15 	stw	r4,-16(fp)
     37c:	e17ffb15 	stw	r5,-20(fp)
     380:	e1bffa15 	stw	r6,-24(fp)
    bool success = true;
     384:	00800044 	movi	r2,1
     388:	e0bfffc5 	stb	r2,-1(fp)
    printf("Verifying %lu words...\n", num_words);
     38c:	e17ffa17 	ldw	r5,-24(fp)
     390:	010000b4 	movhi	r4,2
     394:	21009304 	addi	r4,r4,588
     398:	00005600 	call	560 <printf>
    for (int i = 0; i < num_words; i++)
     39c:	e03ffe15 	stw	zero,-8(fp)
     3a0:	00001d06 	br	418 <verify_dma_transfer+0xb0>
    {
        // Use volatile pointers for reading destination to bypass cache optimization if needed,
        // although cache flush is the proper method.
        volatile alt_u32 read_data = dst[i];
     3a4:	e0bffe17 	ldw	r2,-8(fp)
     3a8:	100490ba 	slli	r2,r2,2
     3ac:	e0fffb17 	ldw	r3,-20(fp)
     3b0:	1885883a 	add	r2,r3,r2
     3b4:	10800017 	ldw	r2,0(r2)
     3b8:	e0bffd15 	stw	r2,-12(fp)
        if (read_data != src[i])
     3bc:	e0bffe17 	ldw	r2,-8(fp)
     3c0:	100490ba 	slli	r2,r2,2
     3c4:	e0fffc17 	ldw	r3,-16(fp)
     3c8:	1885883a 	add	r2,r3,r2
     3cc:	10c00017 	ldw	r3,0(r2)
     3d0:	e0bffd17 	ldw	r2,-12(fp)
     3d4:	18800d26 	beq	r3,r2,40c <verify_dma_transfer+0xa4>
        {
            printf("Mismatch at index %d: expected 0x%08lX, got 0x%08lX\n",
                   i, (alt_u32)src[i], (alt_u32)read_data);
     3d8:	e0bffe17 	ldw	r2,-8(fp)
     3dc:	100490ba 	slli	r2,r2,2
     3e0:	e0fffc17 	ldw	r3,-16(fp)
     3e4:	1885883a 	add	r2,r3,r2
            printf("Mismatch at index %d: expected 0x%08lX, got 0x%08lX\n",
     3e8:	10800017 	ldw	r2,0(r2)
     3ec:	e0fffd17 	ldw	r3,-12(fp)
     3f0:	180f883a 	mov	r7,r3
     3f4:	100d883a 	mov	r6,r2
     3f8:	e17ffe17 	ldw	r5,-8(fp)
     3fc:	010000b4 	movhi	r4,2
     400:	21009904 	addi	r4,r4,612
     404:	00005600 	call	560 <printf>
            success = false;
     408:	e03fffc5 	stb	zero,-1(fp)
    for (int i = 0; i < num_words; i++)
     40c:	e0bffe17 	ldw	r2,-8(fp)
     410:	10800044 	addi	r2,r2,1
     414:	e0bffe15 	stw	r2,-8(fp)
     418:	e0fffe17 	ldw	r3,-8(fp)
     41c:	e0bffa17 	ldw	r2,-24(fp)
     420:	18bfe036 	bltu	r3,r2,3a4 <verify_dma_transfer+0x3c>
            // return false; // Optionally exit on first mismatch
        }
    }
    return success;
     424:	e0bfffc3 	ldbu	r2,-1(fp)
}
     428:	e037883a 	mov	sp,fp
     42c:	dfc00117 	ldw	ra,4(sp)
     430:	df000017 	ldw	fp,0(sp)
     434:	dec00204 	addi	sp,sp,8
     438:	f800283a 	ret

0000043c <main>:

int main()
{
     43c:	defffb04 	addi	sp,sp,-20
     440:	dfc00415 	stw	ra,16(sp)
     444:	df000315 	stw	fp,12(sp)
     448:	df000304 	addi	fp,sp,12
    alt_u32 src_address = (alt_u32)pdata0;
     44c:	008000b4 	movhi	r2,2
     450:	1080e804 	addi	r2,r2,928
     454:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 dst_address = (alt_u32)pdata1;
     458:	d0a00017 	ldw	r2,-32768(gp)
     45c:	e0bffe15 	stw	r2,-8(fp)

    // Transfer size in bytes
    alt_u32 length_bytes = BUFFER_SIZE * sizeof(alt_u32);
     460:	00802004 	movi	r2,128
     464:	e0bffd15 	stw	r2,-12(fp)
                printf("\n"); // Formatting
        }
    }

    // Start the actual DMA
    start_dma_transfer(src_address, dst_address, length_bytes);
     468:	e1bffd17 	ldw	r6,-12(fp)
     46c:	e17ffe17 	ldw	r5,-8(fp)
     470:	e13fff17 	ldw	r4,-4(fp)
     474:	00002040 	call	204 <start_dma_transfer>

    // Wait for DMA to complete
    if (!wait_for_dma_done())
     478:	00002d00 	call	2d0 <wait_for_dma_done>
     47c:	1080005c 	xori	r2,r2,1
     480:	10803fcc 	andi	r2,r2,255
     484:	10000526 	beq	r2,zero,49c <main+0x60>
    {
        printf("DMA transfer failed or timed out!\n");
     488:	010000b4 	movhi	r4,2
     48c:	2100a704 	addi	r4,r4,668
     490:	00006280 	call	628 <puts>
        // Optional: Attempt another reset here?
        // reset_dma();
        return -1;
     494:	00bfffc4 	movi	r2,-1
     498:	00001d06 	br	510 <main+0xd4>
    }

    // !!! Crucial: Flush cache for destination region BEFORE verification !!!
    printf("\nFlushing D-Cache for destination buffer...\n");
     49c:	010000b4 	movhi	r4,2
     4a0:	2100b004 	addi	r4,r4,704
     4a4:	00006280 	call	628 <puts>
    alt_dcache_flush((void *)dst_address, length_bytes);
     4a8:	e0bffe17 	ldw	r2,-8(fp)
     4ac:	e17ffd17 	ldw	r5,-12(fp)
     4b0:	1009883a 	mov	r4,r2
     4b4:	0000ec80 	call	ec8 <alt_dcache_flush>
    printf("D-Cache flushed.\n");
     4b8:	010000b4 	movhi	r4,2
     4bc:	2100bb04 	addi	r4,r4,748
     4c0:	00006280 	call	628 <puts>

    // Verify DMA transfer by reading memory (now hopefully coherent)
    printf("\nVerifying DMA transfer...\n");
     4c4:	010000b4 	movhi	r4,2
     4c8:	2100c004 	addi	r4,r4,768
     4cc:	00006280 	call	628 <puts>
    if (verify_dma_transfer(pdata0, pdata1, BUFFER_SIZE))
     4d0:	d0a00017 	ldw	r2,-32768(gp)
     4d4:	01800804 	movi	r6,32
     4d8:	100b883a 	mov	r5,r2
     4dc:	010000b4 	movhi	r4,2
     4e0:	2100e804 	addi	r4,r4,928
     4e4:	00003680 	call	368 <verify_dma_transfer>
     4e8:	10803fcc 	andi	r2,r2,255
     4ec:	10000426 	beq	r2,zero,500 <main+0xc4>
    {
        printf("DMA Transfer Verification Successful!\n");
     4f0:	010000b4 	movhi	r4,2
     4f4:	2100c704 	addi	r4,r4,796
     4f8:	00006280 	call	628 <puts>
     4fc:	00000306 	br	50c <main+0xd0>
    }
    else
    {
        printf("DMA Transfer Verification Failed!\n");
     500:	010000b4 	movhi	r4,2
     504:	2100d104 	addi	r4,r4,836
     508:	00006280 	call	628 <puts>
    }

    return 0;
     50c:	0005883a 	mov	r2,zero
}
     510:	e037883a 	mov	sp,fp
     514:	dfc00117 	ldw	ra,4(sp)
     518:	df000017 	ldw	fp,0(sp)
     51c:	dec00204 	addi	sp,sp,8
     520:	f800283a 	ret

00000524 <_printf_r>:
     524:	defffd04 	addi	sp,sp,-12
     528:	dfc00015 	stw	ra,0(sp)
     52c:	d9800115 	stw	r6,4(sp)
     530:	d9c00215 	stw	r7,8(sp)
     534:	21800217 	ldw	r6,8(r4)
     538:	00c00034 	movhi	r3,0
     53c:	18c2fd04 	addi	r3,r3,3060
     540:	30c00115 	stw	r3,4(r6)
     544:	280d883a 	mov	r6,r5
     548:	21400217 	ldw	r5,8(r4)
     54c:	d9c00104 	addi	r7,sp,4
     550:	00006c00 	call	6c0 <___vfprintf_internal_r>
     554:	dfc00017 	ldw	ra,0(sp)
     558:	dec00304 	addi	sp,sp,12
     55c:	f800283a 	ret

00000560 <printf>:
     560:	defffc04 	addi	sp,sp,-16
     564:	dfc00015 	stw	ra,0(sp)
     568:	d9400115 	stw	r5,4(sp)
     56c:	d9800215 	stw	r6,8(sp)
     570:	d9c00315 	stw	r7,12(sp)
     574:	008000b4 	movhi	r2,2
     578:	10c19317 	ldw	r3,1612(r2)
     57c:	00800034 	movhi	r2,0
     580:	1082fd04 	addi	r2,r2,3060
     584:	19400217 	ldw	r5,8(r3)
     588:	d9800104 	addi	r6,sp,4
     58c:	28800115 	stw	r2,4(r5)
     590:	200b883a 	mov	r5,r4
     594:	19000217 	ldw	r4,8(r3)
     598:	0000bdc0 	call	bdc <__vfprintf_internal>
     59c:	dfc00017 	ldw	ra,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
     5a4:	f800283a 	ret

000005a8 <_puts_r>:
     5a8:	defffd04 	addi	sp,sp,-12
     5ac:	dc000015 	stw	r16,0(sp)
     5b0:	2021883a 	mov	r16,r4
     5b4:	2809883a 	mov	r4,r5
     5b8:	dfc00215 	stw	ra,8(sp)
     5bc:	dc400115 	stw	r17,4(sp)
     5c0:	2823883a 	mov	r17,r5
     5c4:	00006380 	call	638 <strlen>
     5c8:	81400217 	ldw	r5,8(r16)
     5cc:	00c00034 	movhi	r3,0
     5d0:	18c2fd04 	addi	r3,r3,3060
     5d4:	28c00115 	stw	r3,4(r5)
     5d8:	100f883a 	mov	r7,r2
     5dc:	880d883a 	mov	r6,r17
     5e0:	8009883a 	mov	r4,r16
     5e4:	0000bf40 	call	bf4 <__sfvwrite_small_dev>
     5e8:	10ffffe0 	cmpeqi	r3,r2,-1
     5ec:	1800091e 	bne	r3,zero,614 <_puts_r+0x6c>
     5f0:	81400217 	ldw	r5,8(r16)
     5f4:	018000b4 	movhi	r6,2
     5f8:	01c00044 	movi	r7,1
     5fc:	28800117 	ldw	r2,4(r5)
     600:	3180da04 	addi	r6,r6,872
     604:	8009883a 	mov	r4,r16
     608:	103ee83a 	callr	r2
     60c:	10bfffe0 	cmpeqi	r2,r2,-1
     610:	0085c83a 	sub	r2,zero,r2
     614:	dfc00217 	ldw	ra,8(sp)
     618:	dc400117 	ldw	r17,4(sp)
     61c:	dc000017 	ldw	r16,0(sp)
     620:	dec00304 	addi	sp,sp,12
     624:	f800283a 	ret

00000628 <puts>:
     628:	008000b4 	movhi	r2,2
     62c:	200b883a 	mov	r5,r4
     630:	11019317 	ldw	r4,1612(r2)
     634:	00005a81 	jmpi	5a8 <_puts_r>

00000638 <strlen>:
     638:	2005883a 	mov	r2,r4
     63c:	10c00007 	ldb	r3,0(r2)
     640:	1800021e 	bne	r3,zero,64c <strlen+0x14>
     644:	1105c83a 	sub	r2,r2,r4
     648:	f800283a 	ret
     64c:	10800044 	addi	r2,r2,1
     650:	003ffa06 	br	63c <strlen+0x4>

00000654 <print_repeat>:
     654:	defffb04 	addi	sp,sp,-20
     658:	dc800315 	stw	r18,12(sp)
     65c:	dc400215 	stw	r17,8(sp)
     660:	dc000115 	stw	r16,4(sp)
     664:	dfc00415 	stw	ra,16(sp)
     668:	2025883a 	mov	r18,r4
     66c:	2823883a 	mov	r17,r5
     670:	d9800005 	stb	r6,0(sp)
     674:	3821883a 	mov	r16,r7
     678:	04000716 	blt	zero,r16,698 <print_repeat+0x44>
     67c:	0005883a 	mov	r2,zero
     680:	dfc00417 	ldw	ra,16(sp)
     684:	dc800317 	ldw	r18,12(sp)
     688:	dc400217 	ldw	r17,8(sp)
     68c:	dc000117 	ldw	r16,4(sp)
     690:	dec00504 	addi	sp,sp,20
     694:	f800283a 	ret
     698:	88800117 	ldw	r2,4(r17)
     69c:	01c00044 	movi	r7,1
     6a0:	d80d883a 	mov	r6,sp
     6a4:	880b883a 	mov	r5,r17
     6a8:	9009883a 	mov	r4,r18
     6ac:	103ee83a 	callr	r2
     6b0:	843fffc4 	addi	r16,r16,-1
     6b4:	103ff026 	beq	r2,zero,678 <print_repeat+0x24>
     6b8:	00bfffc4 	movi	r2,-1
     6bc:	003ff006 	br	680 <print_repeat+0x2c>

000006c0 <___vfprintf_internal_r>:
     6c0:	deffe604 	addi	sp,sp,-104
     6c4:	ddc01715 	stw	r23,92(sp)
     6c8:	dd801615 	stw	r22,88(sp)
     6cc:	dd401515 	stw	r21,84(sp)
     6d0:	dd001415 	stw	r20,80(sp)
     6d4:	dcc01315 	stw	r19,76(sp)
     6d8:	dc801215 	stw	r18,72(sp)
     6dc:	dc401115 	stw	r17,68(sp)
     6e0:	dc001015 	stw	r16,64(sp)
     6e4:	dfc01915 	stw	ra,100(sp)
     6e8:	df001815 	stw	fp,96(sp)
     6ec:	2025883a 	mov	r18,r4
     6f0:	2823883a 	mov	r17,r5
     6f4:	d9800515 	stw	r6,20(sp)
     6f8:	382f883a 	mov	r23,r7
     6fc:	0021883a 	mov	r16,zero
     700:	d8000215 	stw	zero,8(sp)
     704:	d8000015 	stw	zero,0(sp)
     708:	0029883a 	mov	r20,zero
     70c:	002d883a 	mov	r22,zero
     710:	0027883a 	mov	r19,zero
     714:	002b883a 	mov	r21,zero
     718:	d8000115 	stw	zero,4(sp)
     71c:	0005883a 	mov	r2,zero
     720:	00000206 	br	72c <___vfprintf_internal_r+0x6c>
     724:	114000e0 	cmpeqi	r5,r2,3
     728:	28004e1e 	bne	r5,zero,864 <___vfprintf_internal_r+0x1a4>
     72c:	d8c00517 	ldw	r3,20(sp)
     730:	19000003 	ldbu	r4,0(r3)
     734:	18c00044 	addi	r3,r3,1
     738:	d8c00515 	stw	r3,20(sp)
     73c:	20c03fcc 	andi	r3,r4,255
     740:	18c0201c 	xori	r3,r3,128
     744:	18ffe004 	addi	r3,r3,-128
     748:	18001026 	beq	r3,zero,78c <___vfprintf_internal_r+0xcc>
     74c:	114000a0 	cmpeqi	r5,r2,2
     750:	28001f1e 	bne	r5,zero,7d0 <___vfprintf_internal_r+0x110>
     754:	114000c8 	cmpgei	r5,r2,3
     758:	283ff21e 	bne	r5,zero,724 <___vfprintf_internal_r+0x64>
     75c:	1000181e 	bne	r2,zero,7c0 <___vfprintf_internal_r+0x100>
     760:	18c00960 	cmpeqi	r3,r3,37
     764:	18010e1e 	bne	r3,zero,ba0 <___vfprintf_internal_r+0x4e0>
     768:	88800117 	ldw	r2,4(r17)
     76c:	d9000805 	stb	r4,32(sp)
     770:	01c00044 	movi	r7,1
     774:	d9800804 	addi	r6,sp,32
     778:	880b883a 	mov	r5,r17
     77c:	9009883a 	mov	r4,r18
     780:	103ee83a 	callr	r2
     784:	10001e26 	beq	r2,zero,800 <___vfprintf_internal_r+0x140>
     788:	043fffc4 	movi	r16,-1
     78c:	8005883a 	mov	r2,r16
     790:	dfc01917 	ldw	ra,100(sp)
     794:	df001817 	ldw	fp,96(sp)
     798:	ddc01717 	ldw	r23,92(sp)
     79c:	dd801617 	ldw	r22,88(sp)
     7a0:	dd401517 	ldw	r21,84(sp)
     7a4:	dd001417 	ldw	r20,80(sp)
     7a8:	dcc01317 	ldw	r19,76(sp)
     7ac:	dc801217 	ldw	r18,72(sp)
     7b0:	dc401117 	ldw	r17,68(sp)
     7b4:	dc001017 	ldw	r16,64(sp)
     7b8:	dec01a04 	addi	sp,sp,104
     7bc:	f800283a 	ret
     7c0:	18800c20 	cmpeqi	r2,r3,48
     7c4:	1000ff1e 	bne	r2,zero,bc4 <___vfprintf_internal_r+0x504>
     7c8:	18800958 	cmpnei	r2,r3,37
     7cc:	103fe626 	beq	r2,zero,768 <___vfprintf_internal_r+0xa8>
     7d0:	213ff404 	addi	r4,r4,-48
     7d4:	21003fcc 	andi	r4,r4,255
     7d8:	208002a8 	cmpgeui	r2,r4,10
     7dc:	10000c1e 	bne	r2,zero,810 <___vfprintf_internal_r+0x150>
     7e0:	98bfffe0 	cmpeqi	r2,r19,-1
     7e4:	1000081e 	bne	r2,zero,808 <___vfprintf_internal_r+0x148>
     7e8:	980490ba 	slli	r2,r19,2
     7ec:	14c5883a 	add	r2,r2,r19
     7f0:	1004907a 	slli	r2,r2,1
     7f4:	20a7883a 	add	r19,r4,r2
     7f8:	00800084 	movi	r2,2
     7fc:	003fcb06 	br	72c <___vfprintf_internal_r+0x6c>
     800:	84000044 	addi	r16,r16,1
     804:	003fc906 	br	72c <___vfprintf_internal_r+0x6c>
     808:	0005883a 	mov	r2,zero
     80c:	003ff906 	br	7f4 <___vfprintf_internal_r+0x134>
     810:	18800ba0 	cmpeqi	r2,r3,46
     814:	1000ef1e 	bne	r2,zero,bd4 <___vfprintf_internal_r+0x514>
     818:	18801b20 	cmpeqi	r2,r3,108
     81c:	1000ec1e 	bne	r2,zero,bd0 <___vfprintf_internal_r+0x510>
     820:	b0bfffe0 	cmpeqi	r2,r22,-1
     824:	10001c1e 	bne	r2,zero,898 <___vfprintf_internal_r+0x1d8>
     828:	d8000115 	stw	zero,4(sp)
     82c:	18801be0 	cmpeqi	r2,r3,111
     830:	1000ba1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x45c>
     834:	18801c08 	cmpgei	r2,r3,112
     838:	1000581e 	bne	r2,zero,99c <___vfprintf_internal_r+0x2dc>
     83c:	188018e0 	cmpeqi	r2,r3,99
     840:	1000bd1e 	bne	r2,zero,b38 <___vfprintf_internal_r+0x478>
     844:	18801908 	cmpgei	r2,r3,100
     848:	1000151e 	bne	r2,zero,8a0 <___vfprintf_internal_r+0x1e0>
     84c:	18c01620 	cmpeqi	r3,r3,88
     850:	183fb226 	beq	r3,zero,71c <___vfprintf_internal_r+0x5c>
     854:	a800721e 	bne	r21,zero,a20 <___vfprintf_internal_r+0x360>
     858:	00800044 	movi	r2,1
     85c:	d8800215 	stw	r2,8(sp)
     860:	00007006 	br	a24 <___vfprintf_internal_r+0x364>
     864:	213ff404 	addi	r4,r4,-48
     868:	21003fcc 	andi	r4,r4,255
     86c:	214002a8 	cmpgeui	r5,r4,10
     870:	283fe91e 	bne	r5,zero,818 <___vfprintf_internal_r+0x158>
     874:	b0ffffe0 	cmpeqi	r3,r22,-1
     878:	1800051e 	bne	r3,zero,890 <___vfprintf_internal_r+0x1d0>
     87c:	b00690ba 	slli	r3,r22,2
     880:	1d87883a 	add	r3,r3,r22
     884:	1806907a 	slli	r3,r3,1
     888:	20ed883a 	add	r22,r4,r3
     88c:	003fa706 	br	72c <___vfprintf_internal_r+0x6c>
     890:	0007883a 	mov	r3,zero
     894:	003ffc06 	br	888 <___vfprintf_internal_r+0x1c8>
     898:	05800044 	movi	r22,1
     89c:	003fe306 	br	82c <___vfprintf_internal_r+0x16c>
     8a0:	18801920 	cmpeqi	r2,r3,100
     8a4:	1000021e 	bne	r2,zero,8b0 <___vfprintf_internal_r+0x1f0>
     8a8:	18c01a60 	cmpeqi	r3,r3,105
     8ac:	183f9b26 	beq	r3,zero,71c <___vfprintf_internal_r+0x5c>
     8b0:	b8800104 	addi	r2,r23,4
     8b4:	d8800415 	stw	r2,16(sp)
     8b8:	d8800017 	ldw	r2,0(sp)
     8bc:	10009826 	beq	r2,zero,b20 <___vfprintf_internal_r+0x460>
     8c0:	bdc00017 	ldw	r23,0(r23)
     8c4:	b8009a0e 	bge	r23,zero,b30 <___vfprintf_internal_r+0x470>
     8c8:	05efc83a 	sub	r23,zero,r23
     8cc:	02400044 	movi	r9,1
     8d0:	df000804 	addi	fp,sp,32
     8d4:	e00d883a 	mov	r6,fp
     8d8:	b800541e 	bne	r23,zero,a2c <___vfprintf_internal_r+0x36c>
     8dc:	e185c83a 	sub	r2,fp,r6
     8e0:	d8800315 	stw	r2,12(sp)
     8e4:	b085c83a 	sub	r2,r22,r2
     8e8:	00800b0e 	bge	zero,r2,918 <___vfprintf_internal_r+0x258>
     8ec:	d8c01004 	addi	r3,sp,64
     8f0:	e0c0072e 	bgeu	fp,r3,910 <___vfprintf_internal_r+0x250>
     8f4:	e085883a 	add	r2,fp,r2
     8f8:	01000c04 	movi	r4,48
     8fc:	e7000044 	addi	fp,fp,1
     900:	e13fffc5 	stb	r4,-1(fp)
     904:	17000226 	beq	r2,fp,910 <___vfprintf_internal_r+0x250>
     908:	d8c01004 	addi	r3,sp,64
     90c:	e0fffb36 	bltu	fp,r3,8fc <___vfprintf_internal_r+0x23c>
     910:	e185c83a 	sub	r2,fp,r6
     914:	d8800315 	stw	r2,12(sp)
     918:	d8800317 	ldw	r2,12(sp)
     91c:	4891883a 	add	r8,r9,r2
     920:	d8800117 	ldw	r2,4(sp)
     924:	9a2fc83a 	sub	r23,r19,r8
     928:	10005926 	beq	r2,zero,a90 <___vfprintf_internal_r+0x3d0>
     92c:	48000a26 	beq	r9,zero,958 <___vfprintf_internal_r+0x298>
     930:	00800b44 	movi	r2,45
     934:	d88007c5 	stb	r2,31(sp)
     938:	88800117 	ldw	r2,4(r17)
     93c:	01c00044 	movi	r7,1
     940:	d98007c4 	addi	r6,sp,31
     944:	880b883a 	mov	r5,r17
     948:	9009883a 	mov	r4,r18
     94c:	103ee83a 	callr	r2
     950:	103f8d1e 	bne	r2,zero,788 <___vfprintf_internal_r+0xc8>
     954:	84000044 	addi	r16,r16,1
     958:	05c0070e 	bge	zero,r23,978 <___vfprintf_internal_r+0x2b8>
     95c:	b80f883a 	mov	r7,r23
     960:	01800c04 	movi	r6,48
     964:	880b883a 	mov	r5,r17
     968:	9009883a 	mov	r4,r18
     96c:	00006540 	call	654 <print_repeat>
     970:	103f851e 	bne	r2,zero,788 <___vfprintf_internal_r+0xc8>
     974:	85e1883a 	add	r16,r16,r23
     978:	d8800317 	ldw	r2,12(sp)
     97c:	e011883a 	mov	r8,fp
     980:	172fc83a 	sub	r23,r2,fp
     984:	ba05883a 	add	r2,r23,r8
     988:	00805716 	blt	zero,r2,ae8 <___vfprintf_internal_r+0x428>
     98c:	8707883a 	add	r3,r16,fp
     990:	ddc00417 	ldw	r23,16(sp)
     994:	1a21c83a 	sub	r16,r3,r8
     998:	003f6006 	br	71c <___vfprintf_internal_r+0x5c>
     99c:	18801d60 	cmpeqi	r2,r3,117
     9a0:	10005f1e 	bne	r2,zero,b20 <___vfprintf_internal_r+0x460>
     9a4:	18801e20 	cmpeqi	r2,r3,120
     9a8:	10001e1e 	bne	r2,zero,a24 <___vfprintf_internal_r+0x364>
     9ac:	18c01ce0 	cmpeqi	r3,r3,115
     9b0:	183f5a26 	beq	r3,zero,71c <___vfprintf_internal_r+0x5c>
     9b4:	b8800104 	addi	r2,r23,4
     9b8:	d8800315 	stw	r2,12(sp)
     9bc:	b8800017 	ldw	r2,0(r23)
     9c0:	1009883a 	mov	r4,r2
     9c4:	1039883a 	mov	fp,r2
     9c8:	00006380 	call	638 <strlen>
     9cc:	988fc83a 	sub	r7,r19,r2
     9d0:	102f883a 	mov	r23,r2
     9d4:	01c0080e 	bge	zero,r7,9f8 <___vfprintf_internal_r+0x338>
     9d8:	01800804 	movi	r6,32
     9dc:	880b883a 	mov	r5,r17
     9e0:	9009883a 	mov	r4,r18
     9e4:	d9c00415 	stw	r7,16(sp)
     9e8:	00006540 	call	654 <print_repeat>
     9ec:	103f661e 	bne	r2,zero,788 <___vfprintf_internal_r+0xc8>
     9f0:	d9c00417 	ldw	r7,16(sp)
     9f4:	81e1883a 	add	r16,r16,r7
     9f8:	88800117 	ldw	r2,4(r17)
     9fc:	b80f883a 	mov	r7,r23
     a00:	e00d883a 	mov	r6,fp
     a04:	880b883a 	mov	r5,r17
     a08:	9009883a 	mov	r4,r18
     a0c:	103ee83a 	callr	r2
     a10:	103f5d1e 	bne	r2,zero,788 <___vfprintf_internal_r+0xc8>
     a14:	85e1883a 	add	r16,r16,r23
     a18:	ddc00317 	ldw	r23,12(sp)
     a1c:	003f4306 	br	72c <___vfprintf_internal_r+0x6c>
     a20:	dd400215 	stw	r21,8(sp)
     a24:	05000404 	movi	r20,16
     a28:	00003d06 	br	b20 <___vfprintf_internal_r+0x460>
     a2c:	b809883a 	mov	r4,r23
     a30:	a00b883a 	mov	r5,r20
     a34:	da400615 	stw	r9,24(sp)
     a38:	0000de00 	call	de0 <__udivsi3>
     a3c:	1009883a 	mov	r4,r2
     a40:	a00b883a 	mov	r5,r20
     a44:	d8800315 	stw	r2,12(sp)
     a48:	0000ea00 	call	ea0 <__mulsi3>
     a4c:	b8afc83a 	sub	r23,r23,r2
     a50:	b8800288 	cmpgei	r2,r23,10
     a54:	d9000317 	ldw	r4,12(sp)
     a58:	da400617 	ldw	r9,24(sp)
     a5c:	d9800804 	addi	r6,sp,32
     a60:	1000051e 	bne	r2,zero,a78 <___vfprintf_internal_r+0x3b8>
     a64:	bdc00c04 	addi	r23,r23,48
     a68:	e7000044 	addi	fp,fp,1
     a6c:	e5ffffc5 	stb	r23,-1(fp)
     a70:	202f883a 	mov	r23,r4
     a74:	003f9806 	br	8d8 <___vfprintf_internal_r+0x218>
     a78:	d8800217 	ldw	r2,8(sp)
     a7c:	10000226 	beq	r2,zero,a88 <___vfprintf_internal_r+0x3c8>
     a80:	bdc00dc4 	addi	r23,r23,55
     a84:	003ff806 	br	a68 <___vfprintf_internal_r+0x3a8>
     a88:	bdc015c4 	addi	r23,r23,87
     a8c:	003ff606 	br	a68 <___vfprintf_internal_r+0x3a8>
     a90:	05c0090e 	bge	zero,r23,ab8 <___vfprintf_internal_r+0x3f8>
     a94:	b80f883a 	mov	r7,r23
     a98:	01800804 	movi	r6,32
     a9c:	880b883a 	mov	r5,r17
     aa0:	9009883a 	mov	r4,r18
     aa4:	da400615 	stw	r9,24(sp)
     aa8:	00006540 	call	654 <print_repeat>
     aac:	103f361e 	bne	r2,zero,788 <___vfprintf_internal_r+0xc8>
     ab0:	da400617 	ldw	r9,24(sp)
     ab4:	85e1883a 	add	r16,r16,r23
     ab8:	483faf26 	beq	r9,zero,978 <___vfprintf_internal_r+0x2b8>
     abc:	00800b44 	movi	r2,45
     ac0:	d88007c5 	stb	r2,31(sp)
     ac4:	88800117 	ldw	r2,4(r17)
     ac8:	01c00044 	movi	r7,1
     acc:	d98007c4 	addi	r6,sp,31
     ad0:	880b883a 	mov	r5,r17
     ad4:	9009883a 	mov	r4,r18
     ad8:	103ee83a 	callr	r2
     adc:	103f2a1e 	bne	r2,zero,788 <___vfprintf_internal_r+0xc8>
     ae0:	84000044 	addi	r16,r16,1
     ae4:	003fa406 	br	978 <___vfprintf_internal_r+0x2b8>
     ae8:	40bfffc3 	ldbu	r2,-1(r8)
     aec:	01c00044 	movi	r7,1
     af0:	423fffc4 	addi	r8,r8,-1
     af4:	d88007c5 	stb	r2,31(sp)
     af8:	88800117 	ldw	r2,4(r17)
     afc:	d98007c4 	addi	r6,sp,31
     b00:	880b883a 	mov	r5,r17
     b04:	9009883a 	mov	r4,r18
     b08:	da000315 	stw	r8,12(sp)
     b0c:	103ee83a 	callr	r2
     b10:	da000317 	ldw	r8,12(sp)
     b14:	103f9b26 	beq	r2,zero,984 <___vfprintf_internal_r+0x2c4>
     b18:	003f1b06 	br	788 <___vfprintf_internal_r+0xc8>
     b1c:	05000204 	movi	r20,8
     b20:	b8800104 	addi	r2,r23,4
     b24:	d8800415 	stw	r2,16(sp)
     b28:	bdc00017 	ldw	r23,0(r23)
     b2c:	d8000015 	stw	zero,0(sp)
     b30:	0013883a 	mov	r9,zero
     b34:	003f6606 	br	8d0 <___vfprintf_internal_r+0x210>
     b38:	98800090 	cmplti	r2,r19,2
     b3c:	1000091e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x4a4>
     b40:	99ffffc4 	addi	r7,r19,-1
     b44:	01800804 	movi	r6,32
     b48:	880b883a 	mov	r5,r17
     b4c:	9009883a 	mov	r4,r18
     b50:	d9c00315 	stw	r7,12(sp)
     b54:	00006540 	call	654 <print_repeat>
     b58:	103f0b1e 	bne	r2,zero,788 <___vfprintf_internal_r+0xc8>
     b5c:	d9c00317 	ldw	r7,12(sp)
     b60:	81e1883a 	add	r16,r16,r7
     b64:	b8800017 	ldw	r2,0(r23)
     b68:	b8c00104 	addi	r3,r23,4
     b6c:	01c00044 	movi	r7,1
     b70:	d8800805 	stb	r2,32(sp)
     b74:	88800117 	ldw	r2,4(r17)
     b78:	d9800804 	addi	r6,sp,32
     b7c:	880b883a 	mov	r5,r17
     b80:	9009883a 	mov	r4,r18
     b84:	d8c00315 	stw	r3,12(sp)
     b88:	103ee83a 	callr	r2
     b8c:	103efe1e 	bne	r2,zero,788 <___vfprintf_internal_r+0xc8>
     b90:	d8c00317 	ldw	r3,12(sp)
     b94:	84000044 	addi	r16,r16,1
     b98:	182f883a 	mov	r23,r3
     b9c:	003ee306 	br	72c <___vfprintf_internal_r+0x6c>
     ba0:	00800044 	movi	r2,1
     ba4:	d8000215 	stw	zero,8(sp)
     ba8:	002b883a 	mov	r21,zero
     bac:	d8000115 	stw	zero,4(sp)
     bb0:	d8800015 	stw	r2,0(sp)
     bb4:	05000284 	movi	r20,10
     bb8:	05bfffc4 	movi	r22,-1
     bbc:	04ffffc4 	movi	r19,-1
     bc0:	003eda06 	br	72c <___vfprintf_internal_r+0x6c>
     bc4:	00800044 	movi	r2,1
     bc8:	d8800115 	stw	r2,4(sp)
     bcc:	003f0a06 	br	7f8 <___vfprintf_internal_r+0x138>
     bd0:	05400044 	movi	r21,1
     bd4:	008000c4 	movi	r2,3
     bd8:	003ed406 	br	72c <___vfprintf_internal_r+0x6c>

00000bdc <__vfprintf_internal>:
     bdc:	008000b4 	movhi	r2,2
     be0:	300f883a 	mov	r7,r6
     be4:	280d883a 	mov	r6,r5
     be8:	200b883a 	mov	r5,r4
     bec:	11019317 	ldw	r4,1612(r2)
     bf0:	00006c01 	jmpi	6c0 <___vfprintf_internal_r>

00000bf4 <__sfvwrite_small_dev>:
     bf4:	2880000b 	ldhu	r2,0(r5)
     bf8:	1080020c 	andi	r2,r2,8
     bfc:	10002526 	beq	r2,zero,c94 <__sfvwrite_small_dev+0xa0>
     c00:	2880008f 	ldh	r2,2(r5)
     c04:	defffb04 	addi	sp,sp,-20
     c08:	dcc00315 	stw	r19,12(sp)
     c0c:	dc800215 	stw	r18,8(sp)
     c10:	dc400115 	stw	r17,4(sp)
     c14:	dc000015 	stw	r16,0(sp)
     c18:	dfc00415 	stw	ra,16(sp)
     c1c:	2027883a 	mov	r19,r4
     c20:	2821883a 	mov	r16,r5
     c24:	3025883a 	mov	r18,r6
     c28:	3823883a 	mov	r17,r7
     c2c:	1000100e 	bge	r2,zero,c70 <__sfvwrite_small_dev+0x7c>
     c30:	8080000b 	ldhu	r2,0(r16)
     c34:	10801014 	ori	r2,r2,64
     c38:	8080000d 	sth	r2,0(r16)
     c3c:	00bfffc4 	movi	r2,-1
     c40:	00000d06 	br	c78 <__sfvwrite_small_dev+0x84>
     c44:	88810050 	cmplti	r2,r17,1025
     c48:	880f883a 	mov	r7,r17
     c4c:	1000011e 	bne	r2,zero,c54 <__sfvwrite_small_dev+0x60>
     c50:	01c10004 	movi	r7,1024
     c54:	8140008f 	ldh	r5,2(r16)
     c58:	900d883a 	mov	r6,r18
     c5c:	9809883a 	mov	r4,r19
     c60:	0000c9c0 	call	c9c <_write_r>
     c64:	00bff20e 	bge	zero,r2,c30 <__sfvwrite_small_dev+0x3c>
     c68:	88a3c83a 	sub	r17,r17,r2
     c6c:	90a5883a 	add	r18,r18,r2
     c70:	047ff416 	blt	zero,r17,c44 <__sfvwrite_small_dev+0x50>
     c74:	0005883a 	mov	r2,zero
     c78:	dfc00417 	ldw	ra,16(sp)
     c7c:	dcc00317 	ldw	r19,12(sp)
     c80:	dc800217 	ldw	r18,8(sp)
     c84:	dc400117 	ldw	r17,4(sp)
     c88:	dc000017 	ldw	r16,0(sp)
     c8c:	dec00504 	addi	sp,sp,20
     c90:	f800283a 	ret
     c94:	00bfffc4 	movi	r2,-1
     c98:	f800283a 	ret

00000c9c <_write_r>:
     c9c:	defffe04 	addi	sp,sp,-8
     ca0:	dc000015 	stw	r16,0(sp)
     ca4:	008000b4 	movhi	r2,2
     ca8:	2021883a 	mov	r16,r4
     cac:	2809883a 	mov	r4,r5
     cb0:	300b883a 	mov	r5,r6
     cb4:	380d883a 	mov	r6,r7
     cb8:	dfc00115 	stw	ra,4(sp)
     cbc:	10019a15 	stw	zero,1640(r2)
     cc0:	00010940 	call	1094 <write>
     cc4:	10ffffd8 	cmpnei	r3,r2,-1
     cc8:	1800041e 	bne	r3,zero,cdc <_write_r+0x40>
     ccc:	00c000b4 	movhi	r3,2
     cd0:	18c19a17 	ldw	r3,1640(r3)
     cd4:	18000126 	beq	r3,zero,cdc <_write_r+0x40>
     cd8:	80c00015 	stw	r3,0(r16)
     cdc:	dfc00117 	ldw	ra,4(sp)
     ce0:	dc000017 	ldw	r16,0(sp)
     ce4:	dec00204 	addi	sp,sp,8
     ce8:	f800283a 	ret

00000cec <__divsi3>:
     cec:	20001a16 	blt	r4,zero,d58 <__divsi3+0x6c>
     cf0:	000f883a 	mov	r7,zero
     cf4:	2800020e 	bge	r5,zero,d00 <__divsi3+0x14>
     cf8:	014bc83a 	sub	r5,zero,r5
     cfc:	39c0005c 	xori	r7,r7,1
     d00:	200d883a 	mov	r6,r4
     d04:	00c00044 	movi	r3,1
     d08:	2900092e 	bgeu	r5,r4,d30 <__divsi3+0x44>
     d0c:	00800804 	movi	r2,32
     d10:	00c00044 	movi	r3,1
     d14:	00000106 	br	d1c <__divsi3+0x30>
     d18:	10001226 	beq	r2,zero,d64 <__divsi3+0x78>
     d1c:	294b883a 	add	r5,r5,r5
     d20:	10bfffc4 	addi	r2,r2,-1
     d24:	18c7883a 	add	r3,r3,r3
     d28:	293ffb36 	bltu	r5,r4,d18 <__divsi3+0x2c>
     d2c:	18000d26 	beq	r3,zero,d64 <__divsi3+0x78>
     d30:	0005883a 	mov	r2,zero
     d34:	31400236 	bltu	r6,r5,d40 <__divsi3+0x54>
     d38:	314dc83a 	sub	r6,r6,r5
     d3c:	10c4b03a 	or	r2,r2,r3
     d40:	1806d07a 	srli	r3,r3,1
     d44:	280ad07a 	srli	r5,r5,1
     d48:	183ffa1e 	bne	r3,zero,d34 <__divsi3+0x48>
     d4c:	38000126 	beq	r7,zero,d54 <__divsi3+0x68>
     d50:	0085c83a 	sub	r2,zero,r2
     d54:	f800283a 	ret
     d58:	0109c83a 	sub	r4,zero,r4
     d5c:	01c00044 	movi	r7,1
     d60:	003fe406 	br	cf4 <__divsi3+0x8>
     d64:	0005883a 	mov	r2,zero
     d68:	003ff806 	br	d4c <__divsi3+0x60>

00000d6c <__modsi3>:
     d6c:	20001716 	blt	r4,zero,dcc <__modsi3+0x60>
     d70:	000f883a 	mov	r7,zero
     d74:	2005883a 	mov	r2,r4
     d78:	2800010e 	bge	r5,zero,d80 <__modsi3+0x14>
     d7c:	014bc83a 	sub	r5,zero,r5
     d80:	00c00044 	movi	r3,1
     d84:	2900092e 	bgeu	r5,r4,dac <__modsi3+0x40>
     d88:	01800804 	movi	r6,32
     d8c:	00c00044 	movi	r3,1
     d90:	00000106 	br	d98 <__modsi3+0x2c>
     d94:	30001026 	beq	r6,zero,dd8 <__modsi3+0x6c>
     d98:	294b883a 	add	r5,r5,r5
     d9c:	31bfffc4 	addi	r6,r6,-1
     da0:	18c7883a 	add	r3,r3,r3
     da4:	293ffb36 	bltu	r5,r4,d94 <__modsi3+0x28>
     da8:	18000b26 	beq	r3,zero,dd8 <__modsi3+0x6c>
     dac:	1806d07a 	srli	r3,r3,1
     db0:	11400136 	bltu	r2,r5,db8 <__modsi3+0x4c>
     db4:	1145c83a 	sub	r2,r2,r5
     db8:	280ad07a 	srli	r5,r5,1
     dbc:	183ffb1e 	bne	r3,zero,dac <__modsi3+0x40>
     dc0:	38000126 	beq	r7,zero,dc8 <__modsi3+0x5c>
     dc4:	0085c83a 	sub	r2,zero,r2
     dc8:	f800283a 	ret
     dcc:	0109c83a 	sub	r4,zero,r4
     dd0:	01c00044 	movi	r7,1
     dd4:	003fe706 	br	d74 <__modsi3+0x8>
     dd8:	2005883a 	mov	r2,r4
     ddc:	003ff806 	br	dc0 <__modsi3+0x54>

00000de0 <__udivsi3>:
     de0:	200d883a 	mov	r6,r4
     de4:	2900152e 	bgeu	r5,r4,e3c <__udivsi3+0x5c>
     de8:	28001416 	blt	r5,zero,e3c <__udivsi3+0x5c>
     dec:	00800804 	movi	r2,32
     df0:	00c00044 	movi	r3,1
     df4:	00000206 	br	e00 <__udivsi3+0x20>
     df8:	10000e26 	beq	r2,zero,e34 <__udivsi3+0x54>
     dfc:	28000416 	blt	r5,zero,e10 <__udivsi3+0x30>
     e00:	294b883a 	add	r5,r5,r5
     e04:	10bfffc4 	addi	r2,r2,-1
     e08:	18c7883a 	add	r3,r3,r3
     e0c:	293ffa36 	bltu	r5,r4,df8 <__udivsi3+0x18>
     e10:	18000826 	beq	r3,zero,e34 <__udivsi3+0x54>
     e14:	0005883a 	mov	r2,zero
     e18:	31400236 	bltu	r6,r5,e24 <__udivsi3+0x44>
     e1c:	314dc83a 	sub	r6,r6,r5
     e20:	10c4b03a 	or	r2,r2,r3
     e24:	1806d07a 	srli	r3,r3,1
     e28:	280ad07a 	srli	r5,r5,1
     e2c:	183ffa1e 	bne	r3,zero,e18 <__udivsi3+0x38>
     e30:	f800283a 	ret
     e34:	0005883a 	mov	r2,zero
     e38:	f800283a 	ret
     e3c:	00c00044 	movi	r3,1
     e40:	003ff406 	br	e14 <__udivsi3+0x34>

00000e44 <__umodsi3>:
     e44:	2005883a 	mov	r2,r4
     e48:	2900132e 	bgeu	r5,r4,e98 <__umodsi3+0x54>
     e4c:	28001216 	blt	r5,zero,e98 <__umodsi3+0x54>
     e50:	01800804 	movi	r6,32
     e54:	00c00044 	movi	r3,1
     e58:	00000206 	br	e64 <__umodsi3+0x20>
     e5c:	30000c26 	beq	r6,zero,e90 <__umodsi3+0x4c>
     e60:	28000416 	blt	r5,zero,e74 <__umodsi3+0x30>
     e64:	294b883a 	add	r5,r5,r5
     e68:	31bfffc4 	addi	r6,r6,-1
     e6c:	18c7883a 	add	r3,r3,r3
     e70:	293ffa36 	bltu	r5,r4,e5c <__umodsi3+0x18>
     e74:	18000626 	beq	r3,zero,e90 <__umodsi3+0x4c>
     e78:	1806d07a 	srli	r3,r3,1
     e7c:	11400136 	bltu	r2,r5,e84 <__umodsi3+0x40>
     e80:	1145c83a 	sub	r2,r2,r5
     e84:	280ad07a 	srli	r5,r5,1
     e88:	183ffb1e 	bne	r3,zero,e78 <__umodsi3+0x34>
     e8c:	f800283a 	ret
     e90:	2005883a 	mov	r2,r4
     e94:	f800283a 	ret
     e98:	00c00044 	movi	r3,1
     e9c:	003ff606 	br	e78 <__umodsi3+0x34>

00000ea0 <__mulsi3>:
     ea0:	0005883a 	mov	r2,zero
     ea4:	20000726 	beq	r4,zero,ec4 <__mulsi3+0x24>
     ea8:	20c0004c 	andi	r3,r4,1
     eac:	2008d07a 	srli	r4,r4,1
     eb0:	18000126 	beq	r3,zero,eb8 <__mulsi3+0x18>
     eb4:	1145883a 	add	r2,r2,r5
     eb8:	294b883a 	add	r5,r5,r5
     ebc:	203ffa1e 	bne	r4,zero,ea8 <__mulsi3+0x8>
     ec0:	f800283a 	ret
     ec4:	f800283a 	ret

00000ec8 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
     ec8:	defffd04 	addi	sp,sp,-12
     ecc:	df000215 	stw	fp,8(sp)
     ed0:	df000204 	addi	fp,sp,8
     ed4:	e13fff15 	stw	r4,-4(fp)
     ed8:	e17ffe15 	stw	r5,-8(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     edc:	0001883a 	nop
     ee0:	e037883a 	mov	sp,fp
     ee4:	df000017 	ldw	fp,0(sp)
     ee8:	dec00104 	addi	sp,sp,4
     eec:	f800283a 	ret

00000ef0 <alt_load_section>:
 */  

void alt_load (void)
{
  /* 
   * Copy the .rwdata section. 
     ef0:	defffc04 	addi	sp,sp,-16
     ef4:	df000315 	stw	fp,12(sp)
     ef8:	df000304 	addi	fp,sp,12
     efc:	e13fff15 	stw	r4,-4(fp)
     f00:	e17ffe15 	stw	r5,-8(fp)
     f04:	e1bffd15 	stw	r6,-12(fp)
   */
     f08:	e0fffe17 	ldw	r3,-8(fp)
     f0c:	e0bfff17 	ldw	r2,-4(fp)
     f10:	18800c26 	beq	r3,r2,f44 <alt_load_section+0x54>

  alt_load_section (&__flash_rwdata_start, 
     f14:	00000806 	br	f38 <alt_load_section+0x48>
		               &__ram_rwdata_start,
		               &__ram_rwdata_end);
     f18:	e0ffff17 	ldw	r3,-4(fp)
     f1c:	18800104 	addi	r2,r3,4
     f20:	e0bfff15 	stw	r2,-4(fp)
     f24:	e0bffe17 	ldw	r2,-8(fp)
     f28:	11000104 	addi	r4,r2,4
     f2c:	e13ffe15 	stw	r4,-8(fp)
     f30:	18c00017 	ldw	r3,0(r3)
     f34:	10c00015 	stw	r3,0(r2)
  alt_load_section (&__flash_rwdata_start, 
     f38:	e0fffe17 	ldw	r3,-8(fp)
     f3c:	e0bffd17 	ldw	r2,-12(fp)
     f40:	18bff51e 	bne	r3,r2,f18 <alt_load_section+0x28>

  /*
   * Copy the exception handler.
     f44:	0001883a 	nop
     f48:	e037883a 	mov	sp,fp
     f4c:	df000017 	ldw	fp,0(sp)
     f50:	dec00104 	addi	sp,sp,4
     f54:	f800283a 	ret

00000f58 <alt_load>:
{
     f58:	defffe04 	addi	sp,sp,-8
     f5c:	dfc00115 	stw	ra,4(sp)
     f60:	df000015 	stw	fp,0(sp)
     f64:	d839883a 	mov	fp,sp
  alt_load_section (&__flash_rwdata_start, 
     f68:	018000b4 	movhi	r6,2
     f6c:	31819a04 	addi	r6,r6,1640
     f70:	014000b4 	movhi	r5,2
     f74:	2940e804 	addi	r5,r5,928
     f78:	01000034 	movhi	r4,0
     f7c:	21093c04 	addi	r4,r4,9456
     f80:	0000ef00 	call	ef0 <alt_load_section>
   */

  alt_load_section (&__flash_exceptions_start, 
     f84:	01800034 	movhi	r6,0
     f88:	31800804 	addi	r6,r6,32
     f8c:	01400034 	movhi	r5,0
     f90:	29400804 	addi	r5,r5,32
     f94:	01000034 	movhi	r4,0
     f98:	21000804 	addi	r4,r4,32
     f9c:	0000ef00 	call	ef0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     fa0:	018000b4 	movhi	r6,2
     fa4:	3180e804 	addi	r6,r6,928
     fa8:	014000b4 	movhi	r5,2
     fac:	29400004 	addi	r5,r5,0
     fb0:	01000034 	movhi	r4,0
     fb4:	21085404 	addi	r4,r4,8528
     fb8:	0000ef00 	call	ef0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     fbc:	00015980 	call	1598 <alt_dcache_flush_all>
  alt_icache_flush_all();
     fc0:	00017900 	call	1790 <alt_icache_flush_all>
}
     fc4:	0001883a 	nop
     fc8:	e037883a 	mov	sp,fp
     fcc:	dfc00117 	ldw	ra,4(sp)
     fd0:	df000017 	ldw	fp,0(sp)
     fd4:	dec00204 	addi	sp,sp,8
     fd8:	f800283a 	ret

00000fdc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     fdc:	defffd04 	addi	sp,sp,-12
     fe0:	dfc00215 	stw	ra,8(sp)
     fe4:	df000115 	stw	fp,4(sp)
     fe8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     fec:	0009883a 	mov	r4,zero
     ff0:	00011cc0 	call	11cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     ff4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     ff8:	00012080 	call	1208 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     ffc:	018000b4 	movhi	r6,2
    1000:	3180db04 	addi	r6,r6,876
    1004:	014000b4 	movhi	r5,2
    1008:	2940db04 	addi	r5,r5,876
    100c:	010000b4 	movhi	r4,2
    1010:	2100db04 	addi	r4,r4,876
    1014:	00018840 	call	1884 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    1018:	00016c80 	call	16c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    101c:	01000034 	movhi	r4,0
    1020:	2105cb04 	addi	r4,r4,5932
    1024:	0001e5c0 	call	1e5c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    1028:	d0a00917 	ldw	r2,-32732(gp)
    102c:	d0e00a17 	ldw	r3,-32728(gp)
    1030:	d1200b17 	ldw	r4,-32724(gp)
    1034:	200d883a 	mov	r6,r4
    1038:	180b883a 	mov	r5,r3
    103c:	1009883a 	mov	r4,r2
    1040:	000043c0 	call	43c <main>
    1044:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    1048:	01000044 	movi	r4,1
    104c:	00014bc0 	call	14bc <close>
  exit (result);
    1050:	e13fff17 	ldw	r4,-4(fp)
    1054:	0001e700 	call	1e70 <exit>

00001058 <alt_get_errno>:
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
    1058:	defffe04 	addi	sp,sp,-8
    105c:	dfc00115 	stw	ra,4(sp)
    1060:	df000015 	stw	fp,0(sp)
    1064:	d839883a 	mov	fp,sp
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    1068:	d0a00717 	ldw	r2,-32740(gp)
    106c:	10000326 	beq	r2,zero,107c <alt_get_errno+0x24>
    1070:	d0a00717 	ldw	r2,-32740(gp)
    1074:	103ee83a 	callr	r2
    1078:	00000106 	br	1080 <alt_get_errno+0x28>
    107c:	d0a00804 	addi	r2,gp,-32736
#endif /* ALT_STDERR_PRESENT */
    1080:	e037883a 	mov	sp,fp
    1084:	dfc00117 	ldw	ra,4(sp)
    1088:	df000017 	ldw	fp,0(sp)
    108c:	dec00204 	addi	sp,sp,8
    1090:	f800283a 	ret

00001094 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1094:	defff904 	addi	sp,sp,-28
    1098:	dfc00615 	stw	ra,24(sp)
    109c:	df000515 	stw	fp,20(sp)
    10a0:	df000504 	addi	fp,sp,20
    10a4:	e13ffd15 	stw	r4,-12(fp)
    10a8:	e17ffc15 	stw	r5,-16(fp)
    10ac:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    10b0:	e0bffd17 	ldw	r2,-12(fp)
    10b4:	10000916 	blt	r2,zero,10dc <write+0x48>
    10b8:	e0fffd17 	ldw	r3,-12(fp)
    10bc:	1805883a 	mov	r2,r3
    10c0:	1085883a 	add	r2,r2,r2
    10c4:	10c5883a 	add	r2,r2,r3
    10c8:	100490ba 	slli	r2,r2,2
    10cc:	00c000b4 	movhi	r3,2
    10d0:	18c13204 	addi	r3,r3,1224
    10d4:	10c5883a 	add	r2,r2,r3
    10d8:	00000106 	br	10e0 <write+0x4c>
    10dc:	0005883a 	mov	r2,zero
    10e0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    10e4:	e0bfff17 	ldw	r2,-4(fp)
    10e8:	10002126 	beq	r2,zero,1170 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    10ec:	e0bfff17 	ldw	r2,-4(fp)
    10f0:	10800217 	ldw	r2,8(r2)
    10f4:	108000cc 	andi	r2,r2,3
    10f8:	10001826 	beq	r2,zero,115c <write+0xc8>
    10fc:	e0bfff17 	ldw	r2,-4(fp)
    1100:	10800017 	ldw	r2,0(r2)
    1104:	10800617 	ldw	r2,24(r2)
    1108:	10001426 	beq	r2,zero,115c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    110c:	e0bfff17 	ldw	r2,-4(fp)
    1110:	10800017 	ldw	r2,0(r2)
    1114:	10800617 	ldw	r2,24(r2)
    1118:	e0fffb17 	ldw	r3,-20(fp)
    111c:	180d883a 	mov	r6,r3
    1120:	e17ffc17 	ldw	r5,-16(fp)
    1124:	e13fff17 	ldw	r4,-4(fp)
    1128:	103ee83a 	callr	r2
    112c:	e0bffe15 	stw	r2,-8(fp)
    1130:	e0bffe17 	ldw	r2,-8(fp)
    1134:	1000070e 	bge	r2,zero,1154 <write+0xc0>
      {
        ALT_ERRNO = -rval;
    1138:	00010580 	call	1058 <alt_get_errno>
    113c:	1007883a 	mov	r3,r2
    1140:	e0bffe17 	ldw	r2,-8(fp)
    1144:	0085c83a 	sub	r2,zero,r2
    1148:	18800015 	stw	r2,0(r3)
        return -1;
    114c:	00bfffc4 	movi	r2,-1
    1150:	00000c06 	br	1184 <write+0xf0>
      }
      return rval;
    1154:	e0bffe17 	ldw	r2,-8(fp)
    1158:	00000a06 	br	1184 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    115c:	00010580 	call	1058 <alt_get_errno>
    1160:	1007883a 	mov	r3,r2
    1164:	00800344 	movi	r2,13
    1168:	18800015 	stw	r2,0(r3)
    116c:	00000406 	br	1180 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    1170:	00010580 	call	1058 <alt_get_errno>
    1174:	1007883a 	mov	r3,r2
    1178:	00801444 	movi	r2,81
    117c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    1180:	00bfffc4 	movi	r2,-1
}
    1184:	e037883a 	mov	sp,fp
    1188:	dfc00117 	ldw	ra,4(sp)
    118c:	df000017 	ldw	fp,0(sp)
    1190:	dec00204 	addi	sp,sp,8
    1194:	f800283a 	ret

00001198 <alt_dev_reg>:
    1198:	defffd04 	addi	sp,sp,-12
    119c:	dfc00215 	stw	ra,8(sp)
    11a0:	df000115 	stw	fp,4(sp)
    11a4:	df000104 	addi	fp,sp,4
    11a8:	e13fff15 	stw	r4,-4(fp)
    11ac:	d1600404 	addi	r5,gp,-32752
    11b0:	e13fff17 	ldw	r4,-4(fp)
    11b4:	00016200 	call	1620 <alt_dev_llist_insert>
    11b8:	e037883a 	mov	sp,fp
    11bc:	dfc00117 	ldw	ra,4(sp)
    11c0:	df000017 	ldw	fp,0(sp)
    11c4:	dec00204 	addi	sp,sp,8
    11c8:	f800283a 	ret

000011cc <alt_irq_init>:
{
    11cc:	defffd04 	addi	sp,sp,-12
    11d0:	dfc00215 	stw	ra,8(sp)
    11d4:	df000115 	stw	fp,4(sp)
    11d8:	df000104 	addi	fp,sp,4
    11dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    11e0:	0001be80 	call	1be8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    11e4:	00800044 	movi	r2,1
    11e8:	1001703a 	wrctl	status,r2
#if defined(NIOS2_EIC_PRESENT) && (NIOS2_NUM_OF_SHADOW_REG_SETS > 0)
    | NIOS2_STATUS_RSIE_MSK
#endif      
      );
}
    11ec:	0001883a 	nop
}
    11f0:	0001883a 	nop
    11f4:	e037883a 	mov	sp,fp
    11f8:	dfc00117 	ldw	ra,4(sp)
    11fc:	df000017 	ldw	fp,0(sp)
    1200:	dec00204 	addi	sp,sp,8
    1204:	f800283a 	ret

00001208 <alt_sys_init>:
{
    1208:	defffe04 	addi	sp,sp,-8
    120c:	dfc00115 	stw	ra,4(sp)
    1210:	df000015 	stw	fp,0(sp)
    1214:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    1218:	010000b4 	movhi	r4,2
    121c:	21011d04 	addi	r4,r4,1140
    1220:	00011980 	call	1198 <alt_dev_reg>
}
    1224:	0001883a 	nop
    1228:	e037883a 	mov	sp,fp
    122c:	dfc00117 	ldw	ra,4(sp)
    1230:	df000017 	ldw	fp,0(sp)
    1234:	dec00204 	addi	sp,sp,8
    1238:	f800283a 	ret

0000123c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    123c:	defffa04 	addi	sp,sp,-24
    1240:	dfc00515 	stw	ra,20(sp)
    1244:	df000415 	stw	fp,16(sp)
    1248:	df000404 	addi	fp,sp,16
    124c:	e13ffe15 	stw	r4,-8(fp)
    1250:	e17ffd15 	stw	r5,-12(fp)
    1254:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1258:	e0bffe17 	ldw	r2,-8(fp)
    125c:	10800017 	ldw	r2,0(r2)
    1260:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1264:	e0bfff17 	ldw	r2,-4(fp)
    1268:	10c00a04 	addi	r3,r2,40
    126c:	e0bffe17 	ldw	r2,-8(fp)
    1270:	10800217 	ldw	r2,8(r2)
    1274:	100f883a 	mov	r7,r2
    1278:	e1bffc17 	ldw	r6,-16(fp)
    127c:	e17ffd17 	ldw	r5,-12(fp)
    1280:	1809883a 	mov	r4,r3
    1284:	00012fc0 	call	12fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1288:	e037883a 	mov	sp,fp
    128c:	dfc00117 	ldw	ra,4(sp)
    1290:	df000017 	ldw	fp,0(sp)
    1294:	dec00204 	addi	sp,sp,8
    1298:	f800283a 	ret

0000129c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    129c:	defffa04 	addi	sp,sp,-24
    12a0:	dfc00515 	stw	ra,20(sp)
    12a4:	df000415 	stw	fp,16(sp)
    12a8:	df000404 	addi	fp,sp,16
    12ac:	e13ffe15 	stw	r4,-8(fp)
    12b0:	e17ffd15 	stw	r5,-12(fp)
    12b4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    12b8:	e0bffe17 	ldw	r2,-8(fp)
    12bc:	10800017 	ldw	r2,0(r2)
    12c0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    12c4:	e0bfff17 	ldw	r2,-4(fp)
    12c8:	10c00a04 	addi	r3,r2,40
    12cc:	e0bffe17 	ldw	r2,-8(fp)
    12d0:	10800217 	ldw	r2,8(r2)
    12d4:	100f883a 	mov	r7,r2
    12d8:	e1bffc17 	ldw	r6,-16(fp)
    12dc:	e17ffd17 	ldw	r5,-12(fp)
    12e0:	1809883a 	mov	r4,r3
    12e4:	00013e80 	call	13e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    12e8:	e037883a 	mov	sp,fp
    12ec:	dfc00117 	ldw	ra,4(sp)
    12f0:	df000017 	ldw	fp,0(sp)
    12f4:	dec00204 	addi	sp,sp,8
    12f8:	f800283a 	ret

000012fc <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    12fc:	defff704 	addi	sp,sp,-36
    1300:	df000815 	stw	fp,32(sp)
    1304:	df000804 	addi	fp,sp,32
    1308:	e13ffb15 	stw	r4,-20(fp)
    130c:	e17ffa15 	stw	r5,-24(fp)
    1310:	e1bff915 	stw	r6,-28(fp)
    1314:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
    1318:	e0bffb17 	ldw	r2,-20(fp)
    131c:	10800017 	ldw	r2,0(r2)
    1320:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
    1324:	e0bffa17 	ldw	r2,-24(fp)
    1328:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
    132c:	e0bff917 	ldw	r2,-28(fp)
    1330:	e0fffa17 	ldw	r3,-24(fp)
    1334:	1885883a 	add	r2,r3,r2
    1338:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
    133c:	00001206 	br	1388 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1340:	e0bffe17 	ldw	r2,-8(fp)
    1344:	10800037 	ldwio	r2,0(r2)
    1348:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    134c:	e0bffc17 	ldw	r2,-16(fp)
    1350:	10a0000c 	andi	r2,r2,32768
    1354:	10000626 	beq	r2,zero,1370 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1358:	e0bfff17 	ldw	r2,-4(fp)
    135c:	10c00044 	addi	r3,r2,1
    1360:	e0ffff15 	stw	r3,-4(fp)
    1364:	e0fffc17 	ldw	r3,-16(fp)
    1368:	10c00005 	stb	r3,0(r2)
    136c:	00000606 	br	1388 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    1370:	e0ffff17 	ldw	r3,-4(fp)
    1374:	e0bffa17 	ldw	r2,-24(fp)
    1378:	1880071e 	bne	r3,r2,1398 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    137c:	e0bff817 	ldw	r2,-32(fp)
    1380:	1090000c 	andi	r2,r2,16384
    1384:	1000061e 	bne	r2,zero,13a0 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
    1388:	e0ffff17 	ldw	r3,-4(fp)
    138c:	e0bffd17 	ldw	r2,-12(fp)
    1390:	18bfeb36 	bltu	r3,r2,1340 <altera_avalon_jtag_uart_read+0x44>
    1394:	00000306 	br	13a4 <altera_avalon_jtag_uart_read+0xa8>
      break;
    1398:	0001883a 	nop
    139c:	00000106 	br	13a4 <altera_avalon_jtag_uart_read+0xa8>
      break;   
    13a0:	0001883a 	nop
    
  }

  if (ptr != buffer)
    13a4:	e0ffff17 	ldw	r3,-4(fp)
    13a8:	e0bffa17 	ldw	r2,-24(fp)
    13ac:	18800426 	beq	r3,r2,13c0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    13b0:	e0ffff17 	ldw	r3,-4(fp)
    13b4:	e0bffa17 	ldw	r2,-24(fp)
    13b8:	1885c83a 	sub	r2,r3,r2
    13bc:	00000606 	br	13d8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    13c0:	e0bff817 	ldw	r2,-32(fp)
    13c4:	1090000c 	andi	r2,r2,16384
    13c8:	10000226 	beq	r2,zero,13d4 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    13cc:	00bffd44 	movi	r2,-11
    13d0:	00000106 	br	13d8 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    13d4:	00bffec4 	movi	r2,-5
}
    13d8:	e037883a 	mov	sp,fp
    13dc:	df000017 	ldw	fp,0(sp)
    13e0:	dec00104 	addi	sp,sp,4
    13e4:	f800283a 	ret

000013e8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    13e8:	defff904 	addi	sp,sp,-28
    13ec:	df000615 	stw	fp,24(sp)
    13f0:	df000604 	addi	fp,sp,24
    13f4:	e13ffd15 	stw	r4,-12(fp)
    13f8:	e17ffc15 	stw	r5,-16(fp)
    13fc:	e1bffb15 	stw	r6,-20(fp)
    1400:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
    1404:	e0bffd17 	ldw	r2,-12(fp)
    1408:	10800017 	ldw	r2,0(r2)
    140c:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
    1410:	e0bffb17 	ldw	r2,-20(fp)
    1414:	e0fffc17 	ldw	r3,-16(fp)
    1418:	1885883a 	add	r2,r3,r2
    141c:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
    1420:	00000f06 	br	1460 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1424:	e0bfff17 	ldw	r2,-4(fp)
    1428:	10800104 	addi	r2,r2,4
    142c:	10800037 	ldwio	r2,0(r2)
    1430:	1007883a 	mov	r3,r2
    1434:	00bfffd4 	movui	r2,65535
    1438:	10c0092e 	bgeu	r2,r3,1460 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    143c:	e0ffff17 	ldw	r3,-4(fp)
    1440:	e0bffc17 	ldw	r2,-16(fp)
    1444:	11000044 	addi	r4,r2,1
    1448:	e13ffc15 	stw	r4,-16(fp)
    144c:	10800003 	ldbu	r2,0(r2)
    1450:	10803fcc 	andi	r2,r2,255
    1454:	1080201c 	xori	r2,r2,128
    1458:	10bfe004 	addi	r2,r2,-128
    145c:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
    1460:	e0fffc17 	ldw	r3,-16(fp)
    1464:	e0bffe17 	ldw	r2,-8(fp)
    1468:	18bfee36 	bltu	r3,r2,1424 <altera_avalon_jtag_uart_write+0x3c>

  return count;
    146c:	e0bffb17 	ldw	r2,-20(fp)
}
    1470:	e037883a 	mov	sp,fp
    1474:	df000017 	ldw	fp,0(sp)
    1478:	dec00104 	addi	sp,sp,4
    147c:	f800283a 	ret

00001480 <alt_get_errno>:

  if (fd)
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
    1480:	defffe04 	addi	sp,sp,-8
    1484:	dfc00115 	stw	ra,4(sp)
    1488:	df000015 	stw	fp,0(sp)
    148c:	d839883a 	mov	fp,sp
     */
    1490:	d0a00717 	ldw	r2,-32740(gp)
    1494:	10000326 	beq	r2,zero,14a4 <alt_get_errno+0x24>
    1498:	d0a00717 	ldw	r2,-32740(gp)
    149c:	103ee83a 	callr	r2
    14a0:	00000106 	br	14a8 <alt_get_errno+0x28>
    14a4:	d0a00804 	addi	r2,gp,-32736

    14a8:	e037883a 	mov	sp,fp
    14ac:	dfc00117 	ldw	ra,4(sp)
    14b0:	df000017 	ldw	fp,0(sp)
    14b4:	dec00204 	addi	sp,sp,8
    14b8:	f800283a 	ret

000014bc <close>:
{
    14bc:	defffb04 	addi	sp,sp,-20
    14c0:	dfc00415 	stw	ra,16(sp)
    14c4:	df000315 	stw	fp,12(sp)
    14c8:	df000304 	addi	fp,sp,12
    14cc:	e13ffd15 	stw	r4,-12(fp)
  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    14d0:	e0bffd17 	ldw	r2,-12(fp)
    14d4:	10000916 	blt	r2,zero,14fc <close+0x40>
    14d8:	e0fffd17 	ldw	r3,-12(fp)
    14dc:	1805883a 	mov	r2,r3
    14e0:	1085883a 	add	r2,r2,r2
    14e4:	10c5883a 	add	r2,r2,r3
    14e8:	100490ba 	slli	r2,r2,2
    14ec:	00c000b4 	movhi	r3,2
    14f0:	18c13204 	addi	r3,r3,1224
    14f4:	10c5883a 	add	r2,r2,r3
    14f8:	00000106 	br	1500 <close+0x44>
    14fc:	0005883a 	mov	r2,zero
    1500:	e0bfff15 	stw	r2,-4(fp)
  if (fd)
    1504:	e0bfff17 	ldw	r2,-4(fp)
    1508:	10001926 	beq	r2,zero,1570 <close+0xb4>
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    150c:	e0bfff17 	ldw	r2,-4(fp)
    1510:	10800017 	ldw	r2,0(r2)
    1514:	10800417 	ldw	r2,16(r2)
    1518:	10000626 	beq	r2,zero,1534 <close+0x78>
    151c:	e0bfff17 	ldw	r2,-4(fp)
    1520:	10800017 	ldw	r2,0(r2)
    1524:	10800417 	ldw	r2,16(r2)
    1528:	e13fff17 	ldw	r4,-4(fp)
    152c:	103ee83a 	callr	r2
    1530:	00000106 	br	1538 <close+0x7c>
    1534:	0005883a 	mov	r2,zero
    1538:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    153c:	e13ffd17 	ldw	r4,-12(fp)
    1540:	0001b780 	call	1b78 <alt_release_fd>
    if (rval < 0)
    1544:	e0bffe17 	ldw	r2,-8(fp)
    1548:	1000070e 	bge	r2,zero,1568 <close+0xac>
    {
      ALT_ERRNO = -rval;
    154c:	00014800 	call	1480 <alt_get_errno>
    1550:	1007883a 	mov	r3,r2
    1554:	e0bffe17 	ldw	r2,-8(fp)
    1558:	0085c83a 	sub	r2,zero,r2
    155c:	18800015 	stw	r2,0(r3)
      return -1;
    1560:	00bfffc4 	movi	r2,-1
    1564:	00000706 	br	1584 <close+0xc8>
    }
    return 0;
    1568:	0005883a 	mov	r2,zero
    156c:	00000506 	br	1584 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1570:	00014800 	call	1480 <alt_get_errno>
    1574:	1007883a 	mov	r3,r2
    1578:	00801444 	movi	r2,81
    157c:	18800015 	stw	r2,0(r3)
    return -1;
    1580:	00bfffc4 	movi	r2,-1
  }
}
    1584:	e037883a 	mov	sp,fp
    1588:	dfc00117 	ldw	ra,4(sp)
    158c:	df000017 	ldw	fp,0(sp)
    1590:	dec00204 	addi	sp,sp,8
    1594:	f800283a 	ret

00001598 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1598:	deffff04 	addi	sp,sp,-4
    159c:	df000015 	stw	fp,0(sp)
    15a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    15a4:	0001883a 	nop
    15a8:	e037883a 	mov	sp,fp
    15ac:	df000017 	ldw	fp,0(sp)
    15b0:	dec00104 	addi	sp,sp,4
    15b4:	f800283a 	ret

000015b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    15b8:	defffc04 	addi	sp,sp,-16
    15bc:	df000315 	stw	fp,12(sp)
    15c0:	df000304 	addi	fp,sp,12
    15c4:	e13fff15 	stw	r4,-4(fp)
    15c8:	e17ffe15 	stw	r5,-8(fp)
    15cc:	e1bffd15 	stw	r6,-12(fp)
  return len;
    15d0:	e0bffd17 	ldw	r2,-12(fp)
}
    15d4:	e037883a 	mov	sp,fp
    15d8:	df000017 	ldw	fp,0(sp)
    15dc:	dec00104 	addi	sp,sp,4
    15e0:	f800283a 	ret

000015e4 <alt_get_errno>:
    15e4:	defffe04 	addi	sp,sp,-8
    15e8:	dfc00115 	stw	ra,4(sp)
    15ec:	df000015 	stw	fp,0(sp)
    15f0:	d839883a 	mov	fp,sp
    15f4:	d0a00717 	ldw	r2,-32740(gp)
    15f8:	10000326 	beq	r2,zero,1608 <alt_get_errno+0x24>
    15fc:	d0a00717 	ldw	r2,-32740(gp)
    1600:	103ee83a 	callr	r2
    1604:	00000106 	br	160c <alt_get_errno+0x28>
    1608:	d0a00804 	addi	r2,gp,-32736
    160c:	e037883a 	mov	sp,fp
    1610:	dfc00117 	ldw	ra,4(sp)
    1614:	df000017 	ldw	fp,0(sp)
    1618:	dec00204 	addi	sp,sp,8
    161c:	f800283a 	ret

00001620 <alt_dev_llist_insert>:
{
    1620:	defffa04 	addi	sp,sp,-24
    1624:	dfc00515 	stw	ra,20(sp)
    1628:	df000415 	stw	fp,16(sp)
    162c:	df000404 	addi	fp,sp,16
    1630:	e13ffd15 	stw	r4,-12(fp)
    1634:	e17ffc15 	stw	r5,-16(fp)
  if (!dev || !dev->name)
    1638:	e0bffd17 	ldw	r2,-12(fp)
    163c:	10000326 	beq	r2,zero,164c <alt_dev_llist_insert+0x2c>
    1640:	e0bffd17 	ldw	r2,-12(fp)
    1644:	10800217 	ldw	r2,8(r2)
    1648:	1000061e 	bne	r2,zero,1664 <alt_dev_llist_insert+0x44>
    ALT_ERRNO = EINVAL;
    164c:	00015e40 	call	15e4 <alt_get_errno>
    1650:	1007883a 	mov	r3,r2
    1654:	00800584 	movi	r2,22
    1658:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    165c:	00bffa84 	movi	r2,-22
    1660:	00001406 	br	16b4 <alt_dev_llist_insert+0x94>
  alt_llist_insert(list, &dev->llist);
    1664:	e0bffd17 	ldw	r2,-12(fp)
    1668:	e0fffc17 	ldw	r3,-16(fp)
    166c:	e0ffff15 	stw	r3,-4(fp)
    1670:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1674:	e0bffe17 	ldw	r2,-8(fp)
    1678:	e0ffff17 	ldw	r3,-4(fp)
    167c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1680:	e0bfff17 	ldw	r2,-4(fp)
    1684:	10c00017 	ldw	r3,0(r2)
    1688:	e0bffe17 	ldw	r2,-8(fp)
    168c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1690:	e0bfff17 	ldw	r2,-4(fp)
    1694:	10800017 	ldw	r2,0(r2)
    1698:	e0fffe17 	ldw	r3,-8(fp)
    169c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    16a0:	e0bfff17 	ldw	r2,-4(fp)
    16a4:	e0fffe17 	ldw	r3,-8(fp)
    16a8:	10c00015 	stw	r3,0(r2)
}
    16ac:	0001883a 	nop
  return 0;  
    16b0:	0005883a 	mov	r2,zero
}
    16b4:	e037883a 	mov	sp,fp
    16b8:	dfc00117 	ldw	ra,4(sp)
    16bc:	df000017 	ldw	fp,0(sp)
    16c0:	dec00204 	addi	sp,sp,8
    16c4:	f800283a 	ret

000016c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    16c8:	defffd04 	addi	sp,sp,-12
    16cc:	dfc00215 	stw	ra,8(sp)
    16d0:	df000115 	stw	fp,4(sp)
    16d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    16d8:	00800034 	movhi	r2,0
    16dc:	10885304 	addi	r2,r2,8524
    16e0:	e0bfff15 	stw	r2,-4(fp)
    16e4:	00000606 	br	1700 <_do_ctors+0x38>
        (*ctor) (); 
    16e8:	e0bfff17 	ldw	r2,-4(fp)
    16ec:	10800017 	ldw	r2,0(r2)
    16f0:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    16f4:	e0bfff17 	ldw	r2,-4(fp)
    16f8:	10bfff04 	addi	r2,r2,-4
    16fc:	e0bfff15 	stw	r2,-4(fp)
    1700:	e0ffff17 	ldw	r3,-4(fp)
    1704:	00800034 	movhi	r2,0
    1708:	10885404 	addi	r2,r2,8528
    170c:	18bff62e 	bgeu	r3,r2,16e8 <_do_ctors+0x20>
}
    1710:	0001883a 	nop
    1714:	0001883a 	nop
    1718:	e037883a 	mov	sp,fp
    171c:	dfc00117 	ldw	ra,4(sp)
    1720:	df000017 	ldw	fp,0(sp)
    1724:	dec00204 	addi	sp,sp,8
    1728:	f800283a 	ret

0000172c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    172c:	defffd04 	addi	sp,sp,-12
    1730:	dfc00215 	stw	ra,8(sp)
    1734:	df000115 	stw	fp,4(sp)
    1738:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    173c:	00800034 	movhi	r2,0
    1740:	10885304 	addi	r2,r2,8524
    1744:	e0bfff15 	stw	r2,-4(fp)
    1748:	00000606 	br	1764 <_do_dtors+0x38>
        (*dtor) (); 
    174c:	e0bfff17 	ldw	r2,-4(fp)
    1750:	10800017 	ldw	r2,0(r2)
    1754:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1758:	e0bfff17 	ldw	r2,-4(fp)
    175c:	10bfff04 	addi	r2,r2,-4
    1760:	e0bfff15 	stw	r2,-4(fp)
    1764:	e0ffff17 	ldw	r3,-4(fp)
    1768:	00800034 	movhi	r2,0
    176c:	10885404 	addi	r2,r2,8528
    1770:	18bff62e 	bgeu	r3,r2,174c <_do_dtors+0x20>
}
    1774:	0001883a 	nop
    1778:	0001883a 	nop
    177c:	e037883a 	mov	sp,fp
    1780:	dfc00117 	ldw	ra,4(sp)
    1784:	df000017 	ldw	fp,0(sp)
    1788:	dec00204 	addi	sp,sp,8
    178c:	f800283a 	ret

00001790 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1790:	deffff04 	addi	sp,sp,-4
    1794:	df000015 	stw	fp,0(sp)
    1798:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    179c:	0001883a 	nop
    17a0:	e037883a 	mov	sp,fp
    17a4:	df000017 	ldw	fp,0(sp)
    17a8:	dec00104 	addi	sp,sp,4
    17ac:	f800283a 	ret

000017b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    17b0:	defff904 	addi	sp,sp,-28
    17b4:	dfc00615 	stw	ra,24(sp)
    17b8:	df000515 	stw	fp,20(sp)
    17bc:	df000504 	addi	fp,sp,20
    17c0:	e13ffe15 	stw	r4,-8(fp)
    17c4:	e17ffd15 	stw	r5,-12(fp)
    17c8:	e1bffc15 	stw	r6,-16(fp)
    17cc:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    17d0:	e1bffb17 	ldw	r6,-20(fp)
    17d4:	e17ffc17 	ldw	r5,-16(fp)
    17d8:	e13ffd17 	ldw	r4,-12(fp)
    17dc:	0001a180 	call	1a18 <open>
    17e0:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    17e4:	e0bfff17 	ldw	r2,-4(fp)
    17e8:	10002016 	blt	r2,zero,186c <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    17ec:	e0ffff17 	ldw	r3,-4(fp)
    17f0:	1805883a 	mov	r2,r3
    17f4:	1085883a 	add	r2,r2,r2
    17f8:	10c5883a 	add	r2,r2,r3
    17fc:	100490ba 	slli	r2,r2,2
    1800:	00c000b4 	movhi	r3,2
    1804:	10c7883a 	add	r3,r2,r3
    1808:	18c13217 	ldw	r3,1224(r3)
    180c:	e0bffe17 	ldw	r2,-8(fp)
    1810:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1814:	e0ffff17 	ldw	r3,-4(fp)
    1818:	1805883a 	mov	r2,r3
    181c:	1085883a 	add	r2,r2,r2
    1820:	10c5883a 	add	r2,r2,r3
    1824:	100490ba 	slli	r2,r2,2
    1828:	00c000b4 	movhi	r3,2
    182c:	10c7883a 	add	r3,r2,r3
    1830:	18c13317 	ldw	r3,1228(r3)
    1834:	e0bffe17 	ldw	r2,-8(fp)
    1838:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    183c:	e0ffff17 	ldw	r3,-4(fp)
    1840:	1805883a 	mov	r2,r3
    1844:	1085883a 	add	r2,r2,r2
    1848:	10c5883a 	add	r2,r2,r3
    184c:	100490ba 	slli	r2,r2,2
    1850:	00c000b4 	movhi	r3,2
    1854:	10c7883a 	add	r3,r2,r3
    1858:	18c13417 	ldw	r3,1232(r3)
    185c:	e0bffe17 	ldw	r2,-8(fp)
    1860:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    1864:	e13fff17 	ldw	r4,-4(fp)
    1868:	0001b780 	call	1b78 <alt_release_fd>
  }
} 
    186c:	0001883a 	nop
    1870:	e037883a 	mov	sp,fp
    1874:	dfc00117 	ldw	ra,4(sp)
    1878:	df000017 	ldw	fp,0(sp)
    187c:	dec00204 	addi	sp,sp,8
    1880:	f800283a 	ret

00001884 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1884:	defffb04 	addi	sp,sp,-20
    1888:	dfc00415 	stw	ra,16(sp)
    188c:	df000315 	stw	fp,12(sp)
    1890:	df000304 	addi	fp,sp,12
    1894:	e13fff15 	stw	r4,-4(fp)
    1898:	e17ffe15 	stw	r5,-8(fp)
    189c:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    18a0:	01c07fc4 	movi	r7,511
    18a4:	01800044 	movi	r6,1
    18a8:	e17fff17 	ldw	r5,-4(fp)
    18ac:	010000b4 	movhi	r4,2
    18b0:	21013504 	addi	r4,r4,1236
    18b4:	00017b00 	call	17b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    18b8:	01c07fc4 	movi	r7,511
    18bc:	000d883a 	mov	r6,zero
    18c0:	e17ffe17 	ldw	r5,-8(fp)
    18c4:	010000b4 	movhi	r4,2
    18c8:	21013204 	addi	r4,r4,1224
    18cc:	00017b00 	call	17b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    18d0:	01c07fc4 	movi	r7,511
    18d4:	01800044 	movi	r6,1
    18d8:	e17ffd17 	ldw	r5,-12(fp)
    18dc:	010000b4 	movhi	r4,2
    18e0:	21013804 	addi	r4,r4,1248
    18e4:	00017b00 	call	17b0 <alt_open_fd>
}  
    18e8:	0001883a 	nop
    18ec:	e037883a 	mov	sp,fp
    18f0:	dfc00117 	ldw	ra,4(sp)
    18f4:	df000017 	ldw	fp,0(sp)
    18f8:	dec00204 	addi	sp,sp,8
    18fc:	f800283a 	ret

00001900 <alt_get_errno>:
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1900:	defffe04 	addi	sp,sp,-8
    1904:	dfc00115 	stw	ra,4(sp)
    1908:	df000015 	stw	fp,0(sp)
    190c:	d839883a 	mov	fp,sp
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1910:	d0a00717 	ldw	r2,-32740(gp)
    1914:	10000326 	beq	r2,zero,1924 <alt_get_errno+0x24>
    1918:	d0a00717 	ldw	r2,-32740(gp)
    191c:	103ee83a 	callr	r2
    1920:	00000106 	br	1928 <alt_get_errno+0x28>
    1924:	d0a00804 	addi	r2,gp,-32736
        (&alt_fd_list[i] != fd))
    1928:	e037883a 	mov	sp,fp
    192c:	dfc00117 	ldw	ra,4(sp)
    1930:	df000017 	ldw	fp,0(sp)
    1934:	dec00204 	addi	sp,sp,8
    1938:	f800283a 	ret

0000193c <alt_file_locked>:
{
    193c:	defffd04 	addi	sp,sp,-12
    1940:	df000215 	stw	fp,8(sp)
    1944:	df000204 	addi	fp,sp,8
    1948:	e13ffe15 	stw	r4,-8(fp)
  fd->fd_flags |= ALT_FD_DEV;
    194c:	e0bffe17 	ldw	r2,-8(fp)
    1950:	10800217 	ldw	r2,8(r2)
    1954:	10d00034 	orhi	r3,r2,16384
    1958:	e0bffe17 	ldw	r2,-8(fp)
    195c:	10c00215 	stw	r3,8(r2)
  for (i = 0; i <= alt_max_fd; i++)
    1960:	e03fff15 	stw	zero,-4(fp)
    1964:	00002306 	br	19f4 <alt_file_locked+0xb8>
    if ((alt_fd_list[i].dev == fd->dev) &&
    1968:	e0ffff17 	ldw	r3,-4(fp)
    196c:	1805883a 	mov	r2,r3
    1970:	1085883a 	add	r2,r2,r2
    1974:	10c5883a 	add	r2,r2,r3
    1978:	100490ba 	slli	r2,r2,2
    197c:	00c000b4 	movhi	r3,2
    1980:	10c7883a 	add	r3,r2,r3
    1984:	18c13217 	ldw	r3,1224(r3)
    1988:	e0bffe17 	ldw	r2,-8(fp)
    198c:	10800017 	ldw	r2,0(r2)
    1990:	1880151e 	bne	r3,r2,19e8 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1994:	e0ffff17 	ldw	r3,-4(fp)
    1998:	1805883a 	mov	r2,r3
    199c:	1085883a 	add	r2,r2,r2
    19a0:	10c5883a 	add	r2,r2,r3
    19a4:	100490ba 	slli	r2,r2,2
    19a8:	00c000b4 	movhi	r3,2
    19ac:	10c7883a 	add	r3,r2,r3
    19b0:	18813417 	ldw	r2,1232(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    19b4:	10000c0e 	bge	r2,zero,19e8 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    19b8:	e0ffff17 	ldw	r3,-4(fp)
    19bc:	1805883a 	mov	r2,r3
    19c0:	1085883a 	add	r2,r2,r2
    19c4:	10c5883a 	add	r2,r2,r3
    19c8:	100490ba 	slli	r2,r2,2
    19cc:	00c000b4 	movhi	r3,2
    19d0:	18c13204 	addi	r3,r3,1224
    19d4:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    19d8:	e0fffe17 	ldw	r3,-8(fp)
    19dc:	18800226 	beq	r3,r2,19e8 <alt_file_locked+0xac>
    {
      return -EACCES;
    19e0:	00bffcc4 	movi	r2,-13
    19e4:	00000806 	br	1a08 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    19e8:	e0bfff17 	ldw	r2,-4(fp)
    19ec:	10800044 	addi	r2,r2,1
    19f0:	e0bfff15 	stw	r2,-4(fp)
    19f4:	d0a00617 	ldw	r2,-32744(gp)
    19f8:	1007883a 	mov	r3,r2
    19fc:	e0bfff17 	ldw	r2,-4(fp)
    1a00:	18bfd92e 	bgeu	r3,r2,1968 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    1a04:	0005883a 	mov	r2,zero
}
    1a08:	e037883a 	mov	sp,fp
    1a0c:	df000017 	ldw	fp,0(sp)
    1a10:	dec00104 	addi	sp,sp,4
    1a14:	f800283a 	ret

00001a18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1a18:	defff604 	addi	sp,sp,-40
    1a1c:	dfc00915 	stw	ra,36(sp)
    1a20:	df000815 	stw	fp,32(sp)
    1a24:	df000804 	addi	fp,sp,32
    1a28:	e13ffa15 	stw	r4,-24(fp)
    1a2c:	e17ff915 	stw	r5,-28(fp)
    1a30:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1a34:	00bfffc4 	movi	r2,-1
    1a38:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    1a3c:	00bffb44 	movi	r2,-19
    1a40:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    1a44:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1a48:	d1600404 	addi	r5,gp,-32752
    1a4c:	e13ffa17 	ldw	r4,-24(fp)
    1a50:	0001c0c0 	call	1c0c <alt_find_dev>
    1a54:	e0bfff15 	stw	r2,-4(fp)
    1a58:	e0bfff17 	ldw	r2,-4(fp)
    1a5c:	1000051e 	bne	r2,zero,1a74 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    1a60:	e13ffa17 	ldw	r4,-24(fp)
    1a64:	0001c9c0 	call	1c9c <alt_find_file>
    1a68:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    1a6c:	00800044 	movi	r2,1
    1a70:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1a74:	e0bfff17 	ldw	r2,-4(fp)
    1a78:	10002c26 	beq	r2,zero,1b2c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    1a7c:	e13fff17 	ldw	r4,-4(fp)
    1a80:	0001da40 	call	1da4 <alt_get_fd>
    1a84:	e0bffe15 	stw	r2,-8(fp)
    1a88:	e0bffe17 	ldw	r2,-8(fp)
    1a8c:	1000030e 	bge	r2,zero,1a9c <open+0x84>
    {
      status = index;
    1a90:	e0bffe17 	ldw	r2,-8(fp)
    1a94:	e0bffd15 	stw	r2,-12(fp)
    1a98:	00002606 	br	1b34 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    1a9c:	e0fffe17 	ldw	r3,-8(fp)
    1aa0:	1805883a 	mov	r2,r3
    1aa4:	1085883a 	add	r2,r2,r2
    1aa8:	10c5883a 	add	r2,r2,r3
    1aac:	100490ba 	slli	r2,r2,2
    1ab0:	00c000b4 	movhi	r3,2
    1ab4:	18c13204 	addi	r3,r3,1224
    1ab8:	10c5883a 	add	r2,r2,r3
    1abc:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1ac0:	e0fff917 	ldw	r3,-28(fp)
    1ac4:	00900034 	movhi	r2,16384
    1ac8:	10bfffc4 	addi	r2,r2,-1
    1acc:	1886703a 	and	r3,r3,r2
    1ad0:	e0bffb17 	ldw	r2,-20(fp)
    1ad4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1ad8:	e0bffc17 	ldw	r2,-16(fp)
    1adc:	1000051e 	bne	r2,zero,1af4 <open+0xdc>
    1ae0:	e13ffb17 	ldw	r4,-20(fp)
    1ae4:	000193c0 	call	193c <alt_file_locked>
    1ae8:	e0bffd15 	stw	r2,-12(fp)
    1aec:	e0bffd17 	ldw	r2,-12(fp)
    1af0:	10001016 	blt	r2,zero,1b34 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1af4:	e0bfff17 	ldw	r2,-4(fp)
    1af8:	10800317 	ldw	r2,12(r2)
    1afc:	10000826 	beq	r2,zero,1b20 <open+0x108>
    1b00:	e0bfff17 	ldw	r2,-4(fp)
    1b04:	10800317 	ldw	r2,12(r2)
    1b08:	e1fff817 	ldw	r7,-32(fp)
    1b0c:	e1bff917 	ldw	r6,-28(fp)
    1b10:	e17ffa17 	ldw	r5,-24(fp)
    1b14:	e13ffb17 	ldw	r4,-20(fp)
    1b18:	103ee83a 	callr	r2
    1b1c:	00000106 	br	1b24 <open+0x10c>
    1b20:	0005883a 	mov	r2,zero
    1b24:	e0bffd15 	stw	r2,-12(fp)
    1b28:	00000206 	br	1b34 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    1b2c:	00bffb44 	movi	r2,-19
    1b30:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1b34:	e0bffd17 	ldw	r2,-12(fp)
    1b38:	1000090e 	bge	r2,zero,1b60 <open+0x148>
  {
    alt_release_fd (index);  
    1b3c:	e13ffe17 	ldw	r4,-8(fp)
    1b40:	0001b780 	call	1b78 <alt_release_fd>
    ALT_ERRNO = -status;
    1b44:	00019000 	call	1900 <alt_get_errno>
    1b48:	1007883a 	mov	r3,r2
    1b4c:	e0bffd17 	ldw	r2,-12(fp)
    1b50:	0085c83a 	sub	r2,zero,r2
    1b54:	18800015 	stw	r2,0(r3)
    return -1;
    1b58:	00bfffc4 	movi	r2,-1
    1b5c:	00000106 	br	1b64 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    1b60:	e0bffe17 	ldw	r2,-8(fp)
}
    1b64:	e037883a 	mov	sp,fp
    1b68:	dfc00117 	ldw	ra,4(sp)
    1b6c:	df000017 	ldw	fp,0(sp)
    1b70:	dec00204 	addi	sp,sp,8
    1b74:	f800283a 	ret

00001b78 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1b78:	defffe04 	addi	sp,sp,-8
    1b7c:	df000115 	stw	fp,4(sp)
    1b80:	df000104 	addi	fp,sp,4
    1b84:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    1b88:	e0bfff17 	ldw	r2,-4(fp)
    1b8c:	108000d0 	cmplti	r2,r2,3
    1b90:	1000101e 	bne	r2,zero,1bd4 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    1b94:	e0ffff17 	ldw	r3,-4(fp)
    1b98:	1805883a 	mov	r2,r3
    1b9c:	1085883a 	add	r2,r2,r2
    1ba0:	10c5883a 	add	r2,r2,r3
    1ba4:	100490ba 	slli	r2,r2,2
    1ba8:	00c000b4 	movhi	r3,2
    1bac:	10c7883a 	add	r3,r2,r3
    1bb0:	18013415 	stw	zero,1232(r3)
    alt_fd_list[fd].dev      = 0;
    1bb4:	e0ffff17 	ldw	r3,-4(fp)
    1bb8:	1805883a 	mov	r2,r3
    1bbc:	1085883a 	add	r2,r2,r2
    1bc0:	10c5883a 	add	r2,r2,r3
    1bc4:	100490ba 	slli	r2,r2,2
    1bc8:	00c000b4 	movhi	r3,2
    1bcc:	10c7883a 	add	r3,r2,r3
    1bd0:	18013215 	stw	zero,1224(r3)
  }
}
    1bd4:	0001883a 	nop
    1bd8:	e037883a 	mov	sp,fp
    1bdc:	df000017 	ldw	fp,0(sp)
    1be0:	dec00104 	addi	sp,sp,4
    1be4:	f800283a 	ret

00001be8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    1be8:	deffff04 	addi	sp,sp,-4
    1bec:	df000015 	stw	fp,0(sp)
    1bf0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    1bf4:	000170fa 	wrctl	ienable,zero
}
    1bf8:	0001883a 	nop
    1bfc:	e037883a 	mov	sp,fp
    1c00:	df000017 	ldw	fp,0(sp)
    1c04:	dec00104 	addi	sp,sp,4
    1c08:	f800283a 	ret

00001c0c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1c0c:	defffa04 	addi	sp,sp,-24
    1c10:	dfc00515 	stw	ra,20(sp)
    1c14:	df000415 	stw	fp,16(sp)
    1c18:	df000404 	addi	fp,sp,16
    1c1c:	e13ffd15 	stw	r4,-12(fp)
    1c20:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    1c24:	e0bffc17 	ldw	r2,-16(fp)
    1c28:	10800017 	ldw	r2,0(r2)
    1c2c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    1c30:	e13ffd17 	ldw	r4,-12(fp)
    1c34:	00006380 	call	638 <strlen>
    1c38:	10800044 	addi	r2,r2,1
    1c3c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1c40:	00000d06 	br	1c78 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1c44:	e0bfff17 	ldw	r2,-4(fp)
    1c48:	10800217 	ldw	r2,8(r2)
    1c4c:	e0fffe17 	ldw	r3,-8(fp)
    1c50:	180d883a 	mov	r6,r3
    1c54:	e17ffd17 	ldw	r5,-12(fp)
    1c58:	1009883a 	mov	r4,r2
    1c5c:	0001e900 	call	1e90 <memcmp>
    1c60:	1000021e 	bne	r2,zero,1c6c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    1c64:	e0bfff17 	ldw	r2,-4(fp)
    1c68:	00000706 	br	1c88 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    1c6c:	e0bfff17 	ldw	r2,-4(fp)
    1c70:	10800017 	ldw	r2,0(r2)
    1c74:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    1c78:	e0ffff17 	ldw	r3,-4(fp)
    1c7c:	e0bffc17 	ldw	r2,-16(fp)
    1c80:	18bff01e 	bne	r3,r2,1c44 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    1c84:	0005883a 	mov	r2,zero
}
    1c88:	e037883a 	mov	sp,fp
    1c8c:	dfc00117 	ldw	ra,4(sp)
    1c90:	df000017 	ldw	fp,0(sp)
    1c94:	dec00204 	addi	sp,sp,8
    1c98:	f800283a 	ret

00001c9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    1c9c:	defffb04 	addi	sp,sp,-20
    1ca0:	dfc00415 	stw	ra,16(sp)
    1ca4:	df000315 	stw	fp,12(sp)
    1ca8:	df000304 	addi	fp,sp,12
    1cac:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    1cb0:	d0a00217 	ldw	r2,-32760(gp)
    1cb4:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1cb8:	00003106 	br	1d80 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    1cbc:	e0bfff17 	ldw	r2,-4(fp)
    1cc0:	10800217 	ldw	r2,8(r2)
    1cc4:	1009883a 	mov	r4,r2
    1cc8:	00006380 	call	638 <strlen>
    1ccc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    1cd0:	e0bfff17 	ldw	r2,-4(fp)
    1cd4:	10c00217 	ldw	r3,8(r2)
    1cd8:	e0bffe17 	ldw	r2,-8(fp)
    1cdc:	10bfffc4 	addi	r2,r2,-1
    1ce0:	1885883a 	add	r2,r3,r2
    1ce4:	10800003 	ldbu	r2,0(r2)
    1ce8:	10803fcc 	andi	r2,r2,255
    1cec:	1080201c 	xori	r2,r2,128
    1cf0:	10bfe004 	addi	r2,r2,-128
    1cf4:	10800bd8 	cmpnei	r2,r2,47
    1cf8:	1000031e 	bne	r2,zero,1d08 <alt_find_file+0x6c>
    {
      len -= 1;
    1cfc:	e0bffe17 	ldw	r2,-8(fp)
    1d00:	10bfffc4 	addi	r2,r2,-1
    1d04:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1d08:	e0bffe17 	ldw	r2,-8(fp)
    1d0c:	e0fffd17 	ldw	r3,-12(fp)
    1d10:	1885883a 	add	r2,r3,r2
    1d14:	10800003 	ldbu	r2,0(r2)
    1d18:	10803fcc 	andi	r2,r2,255
    1d1c:	1080201c 	xori	r2,r2,128
    1d20:	10bfe004 	addi	r2,r2,-128
    1d24:	10800be0 	cmpeqi	r2,r2,47
    1d28:	1000081e 	bne	r2,zero,1d4c <alt_find_file+0xb0>
    1d2c:	e0bffe17 	ldw	r2,-8(fp)
    1d30:	e0fffd17 	ldw	r3,-12(fp)
    1d34:	1885883a 	add	r2,r3,r2
    1d38:	10800003 	ldbu	r2,0(r2)
    1d3c:	10803fcc 	andi	r2,r2,255
    1d40:	1080201c 	xori	r2,r2,128
    1d44:	10bfe004 	addi	r2,r2,-128
    1d48:	10000a1e 	bne	r2,zero,1d74 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    1d4c:	e0bfff17 	ldw	r2,-4(fp)
    1d50:	10800217 	ldw	r2,8(r2)
    1d54:	e0fffe17 	ldw	r3,-8(fp)
    1d58:	180d883a 	mov	r6,r3
    1d5c:	e17ffd17 	ldw	r5,-12(fp)
    1d60:	1009883a 	mov	r4,r2
    1d64:	0001e900 	call	1e90 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    1d68:	1000021e 	bne	r2,zero,1d74 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    1d6c:	e0bfff17 	ldw	r2,-4(fp)
    1d70:	00000706 	br	1d90 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    1d74:	e0bfff17 	ldw	r2,-4(fp)
    1d78:	10800017 	ldw	r2,0(r2)
    1d7c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    1d80:	e0ffff17 	ldw	r3,-4(fp)
    1d84:	d0a00204 	addi	r2,gp,-32760
    1d88:	18bfcc1e 	bne	r3,r2,1cbc <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    1d8c:	0005883a 	mov	r2,zero
}
    1d90:	e037883a 	mov	sp,fp
    1d94:	dfc00117 	ldw	ra,4(sp)
    1d98:	df000017 	ldw	fp,0(sp)
    1d9c:	dec00204 	addi	sp,sp,8
    1da0:	f800283a 	ret

00001da4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    1da4:	defffc04 	addi	sp,sp,-16
    1da8:	df000315 	stw	fp,12(sp)
    1dac:	df000304 	addi	fp,sp,12
    1db0:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    1db4:	00bffa04 	movi	r2,-24
    1db8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1dbc:	e03fff15 	stw	zero,-4(fp)
    1dc0:	00001d06 	br	1e38 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    1dc4:	e0ffff17 	ldw	r3,-4(fp)
    1dc8:	1805883a 	mov	r2,r3
    1dcc:	1085883a 	add	r2,r2,r2
    1dd0:	10c5883a 	add	r2,r2,r3
    1dd4:	100490ba 	slli	r2,r2,2
    1dd8:	00c000b4 	movhi	r3,2
    1ddc:	10c7883a 	add	r3,r2,r3
    1de0:	18813217 	ldw	r2,1224(r3)
    1de4:	1000111e 	bne	r2,zero,1e2c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    1de8:	e0ffff17 	ldw	r3,-4(fp)
    1dec:	1805883a 	mov	r2,r3
    1df0:	1085883a 	add	r2,r2,r2
    1df4:	10c5883a 	add	r2,r2,r3
    1df8:	100490ba 	slli	r2,r2,2
    1dfc:	e13ffd17 	ldw	r4,-12(fp)
    1e00:	00c000b4 	movhi	r3,2
    1e04:	10c7883a 	add	r3,r2,r3
    1e08:	19013215 	stw	r4,1224(r3)
      if (i > alt_max_fd)
    1e0c:	d0e00617 	ldw	r3,-32744(gp)
    1e10:	e0bfff17 	ldw	r2,-4(fp)
    1e14:	1880020e 	bge	r3,r2,1e20 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    1e18:	e0bfff17 	ldw	r2,-4(fp)
    1e1c:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    1e20:	e0bfff17 	ldw	r2,-4(fp)
    1e24:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    1e28:	00000706 	br	1e48 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    1e2c:	e0bfff17 	ldw	r2,-4(fp)
    1e30:	10800044 	addi	r2,r2,1
    1e34:	e0bfff15 	stw	r2,-4(fp)
    1e38:	e0bfff17 	ldw	r2,-4(fp)
    1e3c:	10800810 	cmplti	r2,r2,32
    1e40:	103fe01e 	bne	r2,zero,1dc4 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    1e44:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    1e48:	e0bffe17 	ldw	r2,-8(fp)
}
    1e4c:	e037883a 	mov	sp,fp
    1e50:	df000017 	ldw	fp,0(sp)
    1e54:	dec00104 	addi	sp,sp,4
    1e58:	f800283a 	ret

00001e5c <atexit>:
    1e5c:	200b883a 	mov	r5,r4
    1e60:	000f883a 	mov	r7,zero
    1e64:	000d883a 	mov	r6,zero
    1e68:	0009883a 	mov	r4,zero
    1e6c:	0001ec01 	jmpi	1ec0 <__register_exitproc>

00001e70 <exit>:
    1e70:	defffe04 	addi	sp,sp,-8
    1e74:	000b883a 	mov	r5,zero
    1e78:	dc000015 	stw	r16,0(sp)
    1e7c:	dfc00115 	stw	ra,4(sp)
    1e80:	2021883a 	mov	r16,r4
    1e84:	0001fe80 	call	1fe8 <__call_exitprocs>
    1e88:	8009883a 	mov	r4,r16
    1e8c:	00021140 	call	2114 <_exit>

00001e90 <memcmp>:
    1e90:	0007883a 	mov	r3,zero
    1e94:	30c0021e 	bne	r6,r3,1ea0 <memcmp+0x10>
    1e98:	0005883a 	mov	r2,zero
    1e9c:	f800283a 	ret
    1ea0:	20c5883a 	add	r2,r4,r3
    1ea4:	18c00044 	addi	r3,r3,1
    1ea8:	28cf883a 	add	r7,r5,r3
    1eac:	10800003 	ldbu	r2,0(r2)
    1eb0:	39ffffc3 	ldbu	r7,-1(r7)
    1eb4:	11fff726 	beq	r2,r7,1e94 <memcmp+0x4>
    1eb8:	11c5c83a 	sub	r2,r2,r7
    1ebc:	f800283a 	ret

00001ec0 <__register_exitproc>:
    1ec0:	defffa04 	addi	sp,sp,-24
    1ec4:	008000b4 	movhi	r2,2
    1ec8:	dc000015 	stw	r16,0(sp)
    1ecc:	14019f17 	ldw	r16,1660(r2)
    1ed0:	dd000415 	stw	r20,16(sp)
    1ed4:	dcc00315 	stw	r19,12(sp)
    1ed8:	dc800215 	stw	r18,8(sp)
    1edc:	dc400115 	stw	r17,4(sp)
    1ee0:	dfc00515 	stw	ra,20(sp)
    1ee4:	2023883a 	mov	r17,r4
    1ee8:	2825883a 	mov	r18,r5
    1eec:	3029883a 	mov	r20,r6
    1ef0:	3827883a 	mov	r19,r7
    1ef4:	80000c1e 	bne	r16,zero,1f28 <__register_exitproc+0x68>
    1ef8:	008000b4 	movhi	r2,2
    1efc:	00c000b4 	movhi	r3,2
    1f00:	1081a004 	addi	r2,r2,1664
    1f04:	18819f15 	stw	r2,1660(r3)
    1f08:	00c00034 	movhi	r3,0
    1f0c:	18c00004 	addi	r3,r3,0
    1f10:	18000326 	beq	r3,zero,1f20 <__register_exitproc+0x60>
    1f14:	00c00034 	movhi	r3,0
    1f18:	18c00017 	ldw	r3,0(r3)
    1f1c:	10c02215 	stw	r3,136(r2)
    1f20:	040000b4 	movhi	r16,2
    1f24:	8401a004 	addi	r16,r16,1664
    1f28:	80800117 	ldw	r2,4(r16)
    1f2c:	10800810 	cmplti	r2,r2,32
    1f30:	1000091e 	bne	r2,zero,1f58 <__register_exitproc+0x98>
    1f34:	00bfffc4 	movi	r2,-1
    1f38:	dfc00517 	ldw	ra,20(sp)
    1f3c:	dd000417 	ldw	r20,16(sp)
    1f40:	dcc00317 	ldw	r19,12(sp)
    1f44:	dc800217 	ldw	r18,8(sp)
    1f48:	dc400117 	ldw	r17,4(sp)
    1f4c:	dc000017 	ldw	r16,0(sp)
    1f50:	dec00604 	addi	sp,sp,24
    1f54:	f800283a 	ret
    1f58:	88001a26 	beq	r17,zero,1fc4 <__register_exitproc+0x104>
    1f5c:	80802217 	ldw	r2,136(r16)
    1f60:	1000091e 	bne	r2,zero,1f88 <__register_exitproc+0xc8>
    1f64:	00800034 	movhi	r2,0
    1f68:	10800004 	addi	r2,r2,0
    1f6c:	103ff126 	beq	r2,zero,1f34 <__register_exitproc+0x74>
    1f70:	01004204 	movi	r4,264
    1f74:	00000000 	call	0 <__reset>
    1f78:	103fee26 	beq	r2,zero,1f34 <__register_exitproc+0x74>
    1f7c:	10004015 	stw	zero,256(r2)
    1f80:	10004115 	stw	zero,260(r2)
    1f84:	80802215 	stw	r2,136(r16)
    1f88:	81400117 	ldw	r5,4(r16)
    1f8c:	00c00044 	movi	r3,1
    1f90:	8c400098 	cmpnei	r17,r17,2
    1f94:	280890ba 	slli	r4,r5,2
    1f98:	1946983a 	sll	r3,r3,r5
    1f9c:	1109883a 	add	r4,r2,r4
    1fa0:	25000015 	stw	r20,0(r4)
    1fa4:	11404017 	ldw	r5,256(r2)
    1fa8:	28cab03a 	or	r5,r5,r3
    1fac:	11404015 	stw	r5,256(r2)
    1fb0:	24c02015 	stw	r19,128(r4)
    1fb4:	8800031e 	bne	r17,zero,1fc4 <__register_exitproc+0x104>
    1fb8:	11004117 	ldw	r4,260(r2)
    1fbc:	20c6b03a 	or	r3,r4,r3
    1fc0:	10c04115 	stw	r3,260(r2)
    1fc4:	80800117 	ldw	r2,4(r16)
    1fc8:	10c00044 	addi	r3,r2,1
    1fcc:	10800084 	addi	r2,r2,2
    1fd0:	100490ba 	slli	r2,r2,2
    1fd4:	80c00115 	stw	r3,4(r16)
    1fd8:	80a1883a 	add	r16,r16,r2
    1fdc:	84800015 	stw	r18,0(r16)
    1fe0:	0005883a 	mov	r2,zero
    1fe4:	003fd406 	br	1f38 <__register_exitproc+0x78>

00001fe8 <__call_exitprocs>:
    1fe8:	defff604 	addi	sp,sp,-40
    1fec:	dd800615 	stw	r22,24(sp)
    1ff0:	dd400515 	stw	r21,20(sp)
    1ff4:	dd000415 	stw	r20,16(sp)
    1ff8:	dfc00915 	stw	ra,36(sp)
    1ffc:	df000815 	stw	fp,32(sp)
    2000:	ddc00715 	stw	r23,28(sp)
    2004:	dcc00315 	stw	r19,12(sp)
    2008:	dc800215 	stw	r18,8(sp)
    200c:	dc400115 	stw	r17,4(sp)
    2010:	dc000015 	stw	r16,0(sp)
    2014:	202b883a 	mov	r21,r4
    2018:	2829883a 	mov	r20,r5
    201c:	05800044 	movi	r22,1
    2020:	008000b4 	movhi	r2,2
    2024:	14419f17 	ldw	r17,1660(r2)
    2028:	88000726 	beq	r17,zero,2048 <__call_exitprocs+0x60>
    202c:	8c000117 	ldw	r16,4(r17)
    2030:	8cc02217 	ldw	r19,136(r17)
    2034:	84bfffc4 	addi	r18,r16,-1
    2038:	802090ba 	slli	r16,r16,2
    203c:	9c2f883a 	add	r23,r19,r16
    2040:	8c21883a 	add	r16,r17,r16
    2044:	90000c0e 	bge	r18,zero,2078 <__call_exitprocs+0x90>
    2048:	dfc00917 	ldw	ra,36(sp)
    204c:	df000817 	ldw	fp,32(sp)
    2050:	ddc00717 	ldw	r23,28(sp)
    2054:	dd800617 	ldw	r22,24(sp)
    2058:	dd400517 	ldw	r21,20(sp)
    205c:	dd000417 	ldw	r20,16(sp)
    2060:	dcc00317 	ldw	r19,12(sp)
    2064:	dc800217 	ldw	r18,8(sp)
    2068:	dc400117 	ldw	r17,4(sp)
    206c:	dc000017 	ldw	r16,0(sp)
    2070:	dec00a04 	addi	sp,sp,40
    2074:	f800283a 	ret
    2078:	a0000726 	beq	r20,zero,2098 <__call_exitprocs+0xb0>
    207c:	9800041e 	bne	r19,zero,2090 <__call_exitprocs+0xa8>
    2080:	94bfffc4 	addi	r18,r18,-1
    2084:	bdffff04 	addi	r23,r23,-4
    2088:	843fff04 	addi	r16,r16,-4
    208c:	003fed06 	br	2044 <__call_exitprocs+0x5c>
    2090:	b8801f17 	ldw	r2,124(r23)
    2094:	153ffa1e 	bne	r2,r20,2080 <__call_exitprocs+0x98>
    2098:	88c00117 	ldw	r3,4(r17)
    209c:	80800117 	ldw	r2,4(r16)
    20a0:	18ffffc4 	addi	r3,r3,-1
    20a4:	1c800f1e 	bne	r3,r18,20e4 <__call_exitprocs+0xfc>
    20a8:	8c800115 	stw	r18,4(r17)
    20ac:	103ff426 	beq	r2,zero,2080 <__call_exitprocs+0x98>
    20b0:	8f000117 	ldw	fp,4(r17)
    20b4:	98000426 	beq	r19,zero,20c8 <__call_exitprocs+0xe0>
    20b8:	b486983a 	sll	r3,r22,r18
    20bc:	99004017 	ldw	r4,256(r19)
    20c0:	1908703a 	and	r4,r3,r4
    20c4:	2000091e 	bne	r4,zero,20ec <__call_exitprocs+0x104>
    20c8:	103ee83a 	callr	r2
    20cc:	88c00117 	ldw	r3,4(r17)
    20d0:	008000b4 	movhi	r2,2
    20d4:	10819f17 	ldw	r2,1660(r2)
    20d8:	1f3fd11e 	bne	r3,fp,2020 <__call_exitprocs+0x38>
    20dc:	88bfe826 	beq	r17,r2,2080 <__call_exitprocs+0x98>
    20e0:	003fcf06 	br	2020 <__call_exitprocs+0x38>
    20e4:	80000115 	stw	zero,4(r16)
    20e8:	003ff006 	br	20ac <__call_exitprocs+0xc4>
    20ec:	99404117 	ldw	r5,260(r19)
    20f0:	b93fff17 	ldw	r4,-4(r23)
    20f4:	1946703a 	and	r3,r3,r5
    20f8:	1800041e 	bne	r3,zero,210c <__call_exitprocs+0x124>
    20fc:	200b883a 	mov	r5,r4
    2100:	a809883a 	mov	r4,r21
    2104:	103ee83a 	callr	r2
    2108:	003ff006 	br	20cc <__call_exitprocs+0xe4>
    210c:	103ee83a 	callr	r2
    2110:	003fee06 	br	20cc <__call_exitprocs+0xe4>

00002114 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    2114:	defffd04 	addi	sp,sp,-12
    2118:	df000215 	stw	fp,8(sp)
    211c:	df000204 	addi	fp,sp,8
    2120:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    2124:	0001883a 	nop
    2128:	e0bffe17 	ldw	r2,-8(fp)
    212c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    2130:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    2134:	10000226 	beq	r2,zero,2140 <_exit+0x2c>
    ALT_SIM_FAIL();
    2138:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    213c:	00000106 	br	2144 <_exit+0x30>
    ALT_SIM_PASS();
    2140:	002af0b0 	cmpltui	zero,zero,43970
}
    2144:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    2148:	0001883a 	nop
    214c:	003ffe06 	br	2148 <_exit+0x34>
