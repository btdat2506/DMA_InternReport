/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

/*
#include <stdio.h>

int main()
{
  printf("Hello from Nios II!\n");

  return 0;
}
*/


#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include "system.h"    // System-specific definitions
#include "io.h"        // I/O functions (if needed)
#include "sys/alt_cache.h" // Cache management functions

// Register Offsets (in bytes)
#define DMA_READADDRESS   0x00
#define DMA_WRITEADDRESS  0x01
#define DMA_LENGTH        0x02
#define DMA_CONTROL       0x04
#define DMA_STATUS        0x05

// Control Register Bits
#define DMA_CONTROL_GO    0x1

// Status Register Bits
#define DMA_STATUS_BUSY   (1 << 1)
#define DMA_STATUS_DONE   (1 << 0)

// Buffer size
#define BUFFER_SIZE 32

//pdata0 points to a global array stored in onchip_memory2_0
//pdata1 points to onchip_memory2_1
uint32_t pdata0[BUFFER_SIZE] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33};
uint32_t *pdata1 = (uint32_t*) (ONCHIP_MEMORY2_1_BASE + 0x206);

// Write to DMA register
static inline void dma_write_reg(uint32_t offset, uint32_t value) {
    IOWR(DMA_CONTROLLER_BASE, offset, value);
	//*((volatile uint32_t *)(DMA_CONTROLLER_BASE + offset)) = value;
}

// Read from DMA register
static inline uint32_t dma_read_reg(uint32_t offset) {
    return IORD(DMA_CONTROLLER_BASE, offset);
    //return *((volatile uint32_t *)(DMA_CONTROLLER_BASE + offset));
}


// Start DMA transfer
void start_dma_transfer(uint32_t src_addr, uint32_t dst_addr, uint32_t length_bytes) {
    // Write the source and destination addresses
    dma_write_reg(DMA_READADDRESS, src_addr);
    dma_write_reg(DMA_WRITEADDRESS, dst_addr);

    // Write the length (number of bytes to transfer)
    dma_write_reg(DMA_LENGTH, length_bytes);

    // Set the GO bit to start DMA
    dma_write_reg(DMA_CONTROL, DMA_CONTROL_GO);
}

// Wait for DMA to complete with timeout
bool wait_for_dma_done(uint32_t timeout) {
    uint32_t status;
    for (uint32_t i = 0; i < timeout; i++) {
        status = dma_read_reg(DMA_STATUS);
        if (status & DMA_STATUS_DONE) {
            return true;
        }
        // Optional: Insert a small delay or yield to prevent tight looping
    }
    return false;
}

// Verify DMA transfer
bool verify_dma_transfer() {
    for (int i = 0; i < BUFFER_SIZE; i++) {
        if (pdata1[i] != pdata0[i]) {
            printf("Mismatch at index %d: expected 0x%08X, got 0x%08X\n",
                   i, pdata0[i], pdata1[i]);
        }
    }
    return true;
}

int main() {
    uint32_t src_address = (uint32_t)pdata0;
    uint32_t dst_address = (uint32_t)pdata1;
    //pdata1 = (uint32_t*) calloc(32, sizeof(uint32_t));

    // Transfer size in bytes
    uint32_t length_bytes = BUFFER_SIZE * sizeof(uint32_t);

    // Check if DMA is busy before starting a new transfer
   if (dma_read_reg(DMA_STATUS) & DMA_STATUS_BUSY) {
       printf("DMA is currently busy. Please wait before starting a new transfer.\n");
       return -1;
   }

    // Start DMA transfer
    printf("Starting DMA transfer...\n");
    printf("Source Address: %08X\n", src_address);
    printf("Destination Address: %08X\n", dst_address);
    start_dma_transfer(src_address, dst_address, length_bytes);

    // Wait for DMA to complete with timeout
    printf("Waiting for DMA to complete...\n");
    for (uint32_t i = 0; i < 10; i++);
    /*if (wait_for_dma_done(100)) {
        printf("DMA completed successfully.\n");
    } else {
        printf("DMA transfer timed out.\n");
        //return -1;
    }*/

    printf("Verifying DMA transfer...\n");
    if (verify_dma_transfer()) {
        printf("DMA Transfer Successful!\n");
    } else {
        printf("DMA Transfer Failed!\n");
    }

    return 0;
}
